{"dependencies":[],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var hasOwnProperty = Object.prototype.hasOwnProperty;\n\n  var noop = function noop() {};\n\n  function ensureFunction(value) {\n    return typeof value === 'function' ? value : noop;\n  }\n\n  function invokeForType(fn, type) {\n    return function (node, item, list) {\n      if (node.type === type) {\n        fn.call(this, node, item, list);\n      }\n    };\n  }\n\n  function getWalkersFromStructure(name, nodeType) {\n    var structure = nodeType.structure;\n    var walkers = [];\n\n    for (var key in structure) {\n      if (hasOwnProperty.call(structure, key) === false) {\n        continue;\n      }\n\n      var fieldTypes = structure[key];\n      var walker = {\n        name: key,\n        type: false,\n        nullable: false\n      };\n\n      if (!Array.isArray(structure[key])) {\n        fieldTypes = [structure[key]];\n      }\n\n      for (var i = 0; i < fieldTypes.length; i++) {\n        var fieldType = fieldTypes[i];\n\n        if (fieldType === null) {\n          walker.nullable = true;\n        } else if (typeof fieldType === 'string') {\n          walker.type = 'node';\n        } else if (Array.isArray(fieldType)) {\n          walker.type = 'list';\n        }\n      }\n\n      if (walker.type) {\n        walkers.push(walker);\n      }\n    }\n\n    if (walkers.length) {\n      return {\n        context: nodeType.walkContext,\n        fields: walkers\n      };\n    }\n\n    return null;\n  }\n\n  function getTypesFromConfig(config) {\n    var types = {};\n\n    for (var name in config.node) {\n      if (hasOwnProperty.call(config.node, name)) {\n        var nodeType = config.node[name];\n\n        if (!nodeType.structure) {\n          throw new Error('Missed `structure` field in `' + name + '` node type definition');\n        }\n\n        types[name] = getWalkersFromStructure(name, nodeType);\n      }\n    }\n\n    return types;\n  }\n\n  function createTypeIterator(config, reverse) {\n    var fields = config.fields.slice();\n    var contextName = config.context;\n    var useContext = typeof contextName === 'string';\n\n    if (reverse) {\n      fields.reverse();\n    }\n\n    return function (node, context, walk) {\n      var prevContextValue;\n\n      if (useContext) {\n        prevContextValue = context[contextName];\n        context[contextName] = node;\n      }\n\n      for (var i = 0; i < fields.length; i++) {\n        var field = fields[i];\n        var ref = node[field.name];\n\n        if (!field.nullable || ref) {\n          if (field.type === 'list') {\n            if (reverse) {\n              ref.forEachRight(walk);\n            } else {\n              ref.forEach(walk);\n            }\n          } else {\n            walk(ref);\n          }\n        }\n      }\n\n      if (useContext) {\n        context[contextName] = prevContextValue;\n      }\n    };\n  }\n\n  function createFastTraveralMap(iterators) {\n    return {\n      Atrule: {\n        StyleSheet: iterators.StyleSheet,\n        Atrule: iterators.Atrule,\n        Rule: iterators.Rule,\n        Block: iterators.Block\n      },\n      Rule: {\n        StyleSheet: iterators.StyleSheet,\n        Atrule: iterators.Atrule,\n        Rule: iterators.Rule,\n        Block: iterators.Block\n      },\n      Declaration: {\n        StyleSheet: iterators.StyleSheet,\n        Atrule: iterators.Atrule,\n        Rule: iterators.Rule,\n        Block: iterators.Block,\n        DeclarationList: iterators.DeclarationList\n      }\n    };\n  }\n\n  module.exports = function createWalker(config) {\n    var types = getTypesFromConfig(config);\n    var iteratorsNatural = {};\n    var iteratorsReverse = {};\n\n    for (var name in types) {\n      if (hasOwnProperty.call(types, name) && types[name] !== null) {\n        iteratorsNatural[name] = createTypeIterator(types[name], false);\n        iteratorsReverse[name] = createTypeIterator(types[name], true);\n      }\n    }\n\n    var fastTraversalIteratorsNatural = createFastTraveralMap(iteratorsNatural);\n    var fastTraversalIteratorsReverse = createFastTraveralMap(iteratorsReverse);\n\n    var walk = function walk(root, options) {\n      function walkNode(node, item, list) {\n        enter.call(context, node, item, list);\n\n        if (iterators.hasOwnProperty(node.type)) {\n          iterators[node.type](node, context, walkNode);\n        }\n\n        leave.call(context, node, item, list);\n      }\n\n      var enter = noop;\n      var leave = noop;\n      var iterators = iteratorsNatural;\n      var context = {\n        root: root,\n        stylesheet: null,\n        atrule: null,\n        atrulePrelude: null,\n        rule: null,\n        selector: null,\n        block: null,\n        declaration: null,\n        function: null\n      };\n\n      if (typeof options === 'function') {\n        enter = options;\n      } else if (options) {\n        enter = ensureFunction(options.enter);\n        leave = ensureFunction(options.leave);\n\n        if (options.reverse) {\n          iterators = iteratorsReverse;\n        }\n\n        if (options.visit) {\n          if (fastTraversalIteratorsNatural.hasOwnProperty(options.visit)) {\n            iterators = options.reverse ? fastTraversalIteratorsReverse[options.visit] : fastTraversalIteratorsNatural[options.visit];\n          } else if (!types.hasOwnProperty(options.visit)) {\n            throw new Error('Bad value `' + options.visit + '` for `visit` option (should be: ' + Object.keys(types).join(', ') + ')');\n          }\n\n          enter = invokeForType(enter, options.visit);\n          leave = invokeForType(leave, options.visit);\n        }\n      }\n\n      if (enter === noop && leave === noop) {\n        throw new Error('Neither `enter` nor `leave` walker handler is set or both aren\\'t a function');\n      }\n\n      if (options.reverse) {\n        var tmp = enter;\n        enter = leave;\n        leave = tmp;\n      }\n\n      walkNode(root);\n    };\n\n    walk.find = function (ast, fn) {\n      var found = null;\n      walk(ast, function (node, item, list) {\n        if (found === null && fn.call(this, node, item, list)) {\n          found = node;\n        }\n      });\n      return found;\n    };\n\n    walk.findLast = function (ast, fn) {\n      var found = null;\n      walk(ast, {\n        reverse: true,\n        enter: function enter(node, item, list) {\n          if (found === null && fn.call(this, node, item, list)) {\n            found = node;\n          }\n        }\n      });\n      return found;\n    };\n\n    walk.findAll = function (ast, fn) {\n      var found = [];\n      walk(ast, function (node, item, list) {\n        if (fn.call(this, node, item, list)) {\n          found.push(node);\n        }\n      });\n      return found;\n    };\n\n    return walk;\n  };\n});","lineCount":258,"map":[[2,0,1,0],[2,6,1,4,"hasOwnProperty"],[2,20,1,18],[2,23,1,21,"Object"],[2,29,1,27],[2,30,1,28,"prototype"],[2,39,1,21],[2,40,1,38,"hasOwnProperty"],[2,54,1,0],[4,0,2,0],[4,6,2,4,"noop"],[4,10,2,8],[4,13,2,11],[4,22,2,4,"noop"],[4,26,2,11],[4,29,2,22],[4,30,2,24],[4,31,2,0],[6,0,4,0],[6,11,4,9,"ensureFunction"],[6,25,4,0],[6,26,4,24,"value"],[6,31,4,0],[6,33,4,31],[7,0,5,4],[7,11,5,11],[7,18,5,18,"value"],[7,23,5,11],[7,28,5,28],[7,38,5,11],[7,41,5,41,"value"],[7,46,5,11],[7,49,5,49,"noop"],[7,53,5,4],[8,0,6,1],[10,0,8,0],[10,11,8,9,"invokeForType"],[10,24,8,0],[10,25,8,23,"fn"],[10,27,8,0],[10,29,8,27,"type"],[10,33,8,0],[10,35,8,33],[11,0,9,4],[11,11,9,11],[11,21,9,20,"node"],[11,25,9,11],[11,27,9,26,"item"],[11,31,9,11],[11,33,9,32,"list"],[11,37,9,11],[11,39,9,38],[12,0,10,8],[12,10,10,12,"node"],[12,14,10,16],[12,15,10,17,"type"],[12,19,10,12],[12,24,10,26,"type"],[12,28,10,8],[12,30,10,32],[13,0,11,12,"fn"],[13,8,11,12,"fn"],[13,10,11,14],[13,11,11,15,"call"],[13,15,11,12],[13,16,11,20],[13,20,11,12],[13,22,11,26,"node"],[13,26,11,12],[13,28,11,32,"item"],[13,32,11,12],[13,34,11,38,"list"],[13,38,11,12],[14,0,12,9],[15,0,13,5],[15,5,9,4],[16,0,14,1],[18,0,16,0],[18,11,16,9,"getWalkersFromStructure"],[18,34,16,0],[18,35,16,33,"name"],[18,39,16,0],[18,41,16,39,"nodeType"],[18,49,16,0],[18,51,16,49],[19,0,17,4],[19,8,17,8,"structure"],[19,17,17,17],[19,20,17,20,"nodeType"],[19,28,17,28],[19,29,17,29,"structure"],[19,38,17,4],[20,0,18,4],[20,8,18,8,"walkers"],[20,15,18,15],[20,18,18,18],[20,20,18,4],[22,0,20,4],[22,9,20,9],[22,13,20,13,"key"],[22,16,20,4],[22,20,20,20,"structure"],[22,29,20,4],[22,31,20,31],[23,0,21,8],[23,10,21,12,"hasOwnProperty"],[23,24,21,26],[23,25,21,27,"call"],[23,29,21,12],[23,30,21,32,"structure"],[23,39,21,12],[23,41,21,43,"key"],[23,44,21,12],[23,50,21,52],[23,55,21,8],[23,57,21,59],[24,0,22,12],[25,0,23,9],[27,0,25,8],[27,10,25,12,"fieldTypes"],[27,20,25,22],[27,23,25,25,"structure"],[27,32,25,34],[27,33,25,35,"key"],[27,36,25,34],[27,37,25,8],[28,0,26,8],[28,10,26,12,"walker"],[28,16,26,18],[28,19,26,21],[29,0,27,12,"name"],[29,8,27,12,"name"],[29,12,27,16],[29,14,27,18,"key"],[29,17,26,21],[30,0,28,12,"type"],[30,8,28,12,"type"],[30,12,28,16],[30,14,28,18],[30,19,26,21],[31,0,29,12,"nullable"],[31,8,29,12,"nullable"],[31,16,29,20],[31,18,29,22],[32,0,26,21],[32,7,26,8],[34,0,32,8],[34,10,32,12],[34,11,32,13,"Array"],[34,16,32,18],[34,17,32,19,"isArray"],[34,24,32,13],[34,25,32,27,"structure"],[34,34,32,36],[34,35,32,37,"key"],[34,38,32,36],[34,39,32,13],[34,40,32,8],[34,42,32,44],[35,0,33,12,"fieldTypes"],[35,8,33,12,"fieldTypes"],[35,18,33,22],[35,21,33,25],[35,22,33,26,"structure"],[35,31,33,35],[35,32,33,36,"key"],[35,35,33,35],[35,36,33,25],[35,37,33,12],[36,0,34,9],[38,0,36,8],[38,11,36,13],[38,15,36,17,"i"],[38,16,36,18],[38,19,36,21],[38,20,36,8],[38,22,36,24,"i"],[38,23,36,25],[38,26,36,28,"fieldTypes"],[38,36,36,38],[38,37,36,39,"length"],[38,43,36,8],[38,45,36,47,"i"],[38,46,36,48],[38,48,36,8],[38,50,36,52],[39,0,37,12],[39,12,37,16,"fieldType"],[39,21,37,25],[39,24,37,28,"fieldTypes"],[39,34,37,38],[39,35,37,39,"i"],[39,36,37,38],[39,37,37,12],[41,0,38,12],[41,12,38,16,"fieldType"],[41,21,38,25],[41,26,38,30],[41,30,38,12],[41,32,38,36],[42,0,39,16,"walker"],[42,10,39,16,"walker"],[42,16,39,22],[42,17,39,23,"nullable"],[42,25,39,16],[42,28,39,34],[42,32,39,16],[43,0,40,13],[43,9,38,12],[43,15,40,19],[43,19,40,23],[43,26,40,30,"fieldType"],[43,35,40,23],[43,40,40,44],[43,48,40,19],[43,50,40,54],[44,0,41,16,"walker"],[44,10,41,16,"walker"],[44,16,41,22],[44,17,41,23,"type"],[44,21,41,16],[44,24,41,30],[44,30,41,16],[45,0,42,13],[45,9,40,19],[45,15,42,19],[45,19,42,23,"Array"],[45,24,42,28],[45,25,42,29,"isArray"],[45,32,42,23],[45,33,42,37,"fieldType"],[45,42,42,23],[45,43,42,19],[45,45,42,49],[46,0,43,16,"walker"],[46,10,43,16,"walker"],[46,16,43,22],[46,17,43,23,"type"],[46,21,43,16],[46,24,43,30],[46,30,43,16],[47,0,44,13],[48,0,45,9],[50,0,47,8],[50,10,47,12,"walker"],[50,16,47,18],[50,17,47,19,"type"],[50,21,47,8],[50,23,47,25],[51,0,48,12,"walkers"],[51,8,48,12,"walkers"],[51,15,48,19],[51,16,48,20,"push"],[51,20,48,12],[51,21,48,25,"walker"],[51,27,48,12],[52,0,49,9],[53,0,50,5],[55,0,52,4],[55,8,52,8,"walkers"],[55,15,52,15],[55,16,52,16,"length"],[55,22,52,4],[55,24,52,24],[56,0,53,8],[56,13,53,15],[57,0,54,12,"context"],[57,8,54,12,"context"],[57,15,54,19],[57,17,54,21,"nodeType"],[57,25,54,29],[57,26,54,30,"walkContext"],[57,37,53,15],[58,0,55,12,"fields"],[58,8,55,12,"fields"],[58,14,55,18],[58,16,55,20,"walkers"],[59,0,53,15],[59,7,53,8],[60,0,57,5],[62,0,59,4],[62,11,59,11],[62,15,59,4],[63,0,60,1],[65,0,62,0],[65,11,62,9,"getTypesFromConfig"],[65,29,62,0],[65,30,62,28,"config"],[65,36,62,0],[65,38,62,36],[66,0,63,4],[66,8,63,8,"types"],[66,13,63,13],[66,16,63,16],[66,18,63,4],[68,0,65,4],[68,9,65,9],[68,13,65,13,"name"],[68,17,65,4],[68,21,65,21,"config"],[68,27,65,27],[68,28,65,28,"node"],[68,32,65,4],[68,34,65,34],[69,0,66,8],[69,10,66,12,"hasOwnProperty"],[69,24,66,26],[69,25,66,27,"call"],[69,29,66,12],[69,30,66,32,"config"],[69,36,66,38],[69,37,66,39,"node"],[69,41,66,12],[69,43,66,45,"name"],[69,47,66,12],[69,48,66,8],[69,50,66,52],[70,0,67,12],[70,12,67,16,"nodeType"],[70,20,67,24],[70,23,67,27,"config"],[70,29,67,33],[70,30,67,34,"node"],[70,34,67,27],[70,35,67,39,"name"],[70,39,67,27],[70,40,67,12],[72,0,69,12],[72,12,69,16],[72,13,69,17,"nodeType"],[72,21,69,25],[72,22,69,26,"structure"],[72,31,69,12],[72,33,69,37],[73,0,70,16],[73,16,70,22],[73,20,70,26,"Error"],[73,25,70,22],[73,26,70,32],[73,60,70,66,"name"],[73,64,70,32],[73,67,70,73],[73,91,70,22],[73,92,70,16],[74,0,71,13],[76,0,73,12,"types"],[76,8,73,12,"types"],[76,13,73,17],[76,14,73,18,"name"],[76,18,73,17],[76,19,73,12],[76,22,73,26,"getWalkersFromStructure"],[76,45,73,49],[76,46,73,50,"name"],[76,50,73,49],[76,52,73,56,"nodeType"],[76,60,73,49],[76,61,73,12],[77,0,74,9],[78,0,75,5],[80,0,77,4],[80,11,77,11,"types"],[80,16,77,4],[81,0,78,1],[83,0,80,0],[83,11,80,9,"createTypeIterator"],[83,29,80,0],[83,30,80,28,"config"],[83,36,80,0],[83,38,80,36,"reverse"],[83,45,80,0],[83,47,80,45],[84,0,81,4],[84,8,81,8,"fields"],[84,14,81,14],[84,17,81,17,"config"],[84,23,81,23],[84,24,81,24,"fields"],[84,30,81,17],[84,31,81,31,"slice"],[84,36,81,17],[84,38,81,4],[85,0,82,4],[85,8,82,8,"contextName"],[85,19,82,19],[85,22,82,22,"config"],[85,28,82,28],[85,29,82,29,"context"],[85,36,82,4],[86,0,83,4],[86,8,83,8,"useContext"],[86,18,83,18],[86,21,83,21],[86,28,83,28,"contextName"],[86,39,83,21],[86,44,83,44],[86,52,83,4],[88,0,85,4],[88,8,85,8,"reverse"],[88,15,85,4],[88,17,85,17],[89,0,86,8,"fields"],[89,6,86,8,"fields"],[89,12,86,14],[89,13,86,15,"reverse"],[89,20,86,8],[90,0,87,5],[92,0,89,4],[92,11,89,11],[92,21,89,20,"node"],[92,25,89,11],[92,27,89,26,"context"],[92,34,89,11],[92,36,89,35,"walk"],[92,40,89,11],[92,42,89,41],[93,0,90,8],[93,10,90,12,"prevContextValue"],[93,26,90,8],[95,0,92,8],[95,10,92,12,"useContext"],[95,20,92,8],[95,22,92,24],[96,0,93,12,"prevContextValue"],[96,8,93,12,"prevContextValue"],[96,24,93,28],[96,27,93,31,"context"],[96,34,93,38],[96,35,93,39,"contextName"],[96,46,93,38],[96,47,93,12],[97,0,94,12,"context"],[97,8,94,12,"context"],[97,15,94,19],[97,16,94,20,"contextName"],[97,27,94,19],[97,28,94,12],[97,31,94,35,"node"],[97,35,94,12],[98,0,95,9],[100,0,97,8],[100,11,97,13],[100,15,97,17,"i"],[100,16,97,18],[100,19,97,21],[100,20,97,8],[100,22,97,24,"i"],[100,23,97,25],[100,26,97,28,"fields"],[100,32,97,34],[100,33,97,35,"length"],[100,39,97,8],[100,41,97,43,"i"],[100,42,97,44],[100,44,97,8],[100,46,97,48],[101,0,98,12],[101,12,98,16,"field"],[101,17,98,21],[101,20,98,24,"fields"],[101,26,98,30],[101,27,98,31,"i"],[101,28,98,30],[101,29,98,12],[102,0,99,12],[102,12,99,16,"ref"],[102,15,99,19],[102,18,99,22,"node"],[102,22,99,26],[102,23,99,27,"field"],[102,28,99,32],[102,29,99,33,"name"],[102,33,99,26],[102,34,99,12],[104,0,101,12],[104,12,101,16],[104,13,101,17,"field"],[104,18,101,22],[104,19,101,23,"nullable"],[104,27,101,16],[104,31,101,35,"ref"],[104,34,101,12],[104,36,101,40],[105,0,102,16],[105,14,102,20,"field"],[105,19,102,25],[105,20,102,26,"type"],[105,24,102,20],[105,29,102,35],[105,35,102,16],[105,37,102,43],[106,0,103,20],[106,16,103,24,"reverse"],[106,23,103,20],[106,25,103,33],[107,0,104,24,"ref"],[107,14,104,24,"ref"],[107,17,104,27],[107,18,104,28,"forEachRight"],[107,30,104,24],[107,31,104,41,"walk"],[107,35,104,24],[108,0,105,21],[108,13,103,20],[108,19,105,27],[109,0,106,24,"ref"],[109,14,106,24,"ref"],[109,17,106,27],[109,18,106,28,"forEach"],[109,25,106,24],[109,26,106,36,"walk"],[109,30,106,24],[110,0,107,21],[111,0,108,17],[111,11,102,16],[111,17,108,23],[112,0,109,20,"walk"],[112,12,109,20,"walk"],[112,16,109,24],[112,17,109,25,"ref"],[112,20,109,24],[112,21,109,20],[113,0,110,17],[114,0,111,13],[115,0,112,9],[117,0,114,8],[117,10,114,12,"useContext"],[117,20,114,8],[117,22,114,24],[118,0,115,12,"context"],[118,8,115,12,"context"],[118,15,115,19],[118,16,115,20,"contextName"],[118,27,115,19],[118,28,115,12],[118,31,115,35,"prevContextValue"],[118,47,115,12],[119,0,116,9],[120,0,117,5],[120,5,89,4],[121,0,118,1],[123,0,120,0],[123,11,120,9,"createFastTraveralMap"],[123,32,120,0],[123,33,120,31,"iterators"],[123,42,120,0],[123,44,120,42],[124,0,121,4],[124,11,121,11],[125,0,122,8,"Atrule"],[125,6,122,8,"Atrule"],[125,12,122,14],[125,14,122,16],[126,0,123,12,"StyleSheet"],[126,8,123,12,"StyleSheet"],[126,18,123,22],[126,20,123,24,"iterators"],[126,29,123,33],[126,30,123,34,"StyleSheet"],[126,40,122,16],[127,0,124,12,"Atrule"],[127,8,124,12,"Atrule"],[127,14,124,18],[127,16,124,20,"iterators"],[127,25,124,29],[127,26,124,30,"Atrule"],[127,32,122,16],[128,0,125,12,"Rule"],[128,8,125,12,"Rule"],[128,12,125,16],[128,14,125,18,"iterators"],[128,23,125,27],[128,24,125,28,"Rule"],[128,28,122,16],[129,0,126,12,"Block"],[129,8,126,12,"Block"],[129,13,126,17],[129,15,126,19,"iterators"],[129,24,126,28],[129,25,126,29,"Block"],[130,0,122,16],[130,7,121,11],[131,0,128,8,"Rule"],[131,6,128,8,"Rule"],[131,10,128,12],[131,12,128,14],[132,0,129,12,"StyleSheet"],[132,8,129,12,"StyleSheet"],[132,18,129,22],[132,20,129,24,"iterators"],[132,29,129,33],[132,30,129,34,"StyleSheet"],[132,40,128,14],[133,0,130,12,"Atrule"],[133,8,130,12,"Atrule"],[133,14,130,18],[133,16,130,20,"iterators"],[133,25,130,29],[133,26,130,30,"Atrule"],[133,32,128,14],[134,0,131,12,"Rule"],[134,8,131,12,"Rule"],[134,12,131,16],[134,14,131,18,"iterators"],[134,23,131,27],[134,24,131,28,"Rule"],[134,28,128,14],[135,0,132,12,"Block"],[135,8,132,12,"Block"],[135,13,132,17],[135,15,132,19,"iterators"],[135,24,132,28],[135,25,132,29,"Block"],[136,0,128,14],[136,7,121,11],[137,0,134,8,"Declaration"],[137,6,134,8,"Declaration"],[137,17,134,19],[137,19,134,21],[138,0,135,12,"StyleSheet"],[138,8,135,12,"StyleSheet"],[138,18,135,22],[138,20,135,24,"iterators"],[138,29,135,33],[138,30,135,34,"StyleSheet"],[138,40,134,21],[139,0,136,12,"Atrule"],[139,8,136,12,"Atrule"],[139,14,136,18],[139,16,136,20,"iterators"],[139,25,136,29],[139,26,136,30,"Atrule"],[139,32,134,21],[140,0,137,12,"Rule"],[140,8,137,12,"Rule"],[140,12,137,16],[140,14,137,18,"iterators"],[140,23,137,27],[140,24,137,28,"Rule"],[140,28,134,21],[141,0,138,12,"Block"],[141,8,138,12,"Block"],[141,13,138,17],[141,15,138,19,"iterators"],[141,24,138,28],[141,25,138,29,"Block"],[141,30,134,21],[142,0,139,12,"DeclarationList"],[142,8,139,12,"DeclarationList"],[142,23,139,27],[142,25,139,29,"iterators"],[142,34,139,38],[142,35,139,39,"DeclarationList"],[143,0,134,21],[144,0,121,11],[144,5,121,4],[145,0,142,1],[147,0,144,0,"module"],[147,2,144,0,"module"],[147,8,144,6],[147,9,144,7,"exports"],[147,16,144,0],[147,19,144,17],[147,28,144,26,"createWalker"],[147,40,144,17],[147,41,144,39,"config"],[147,47,144,17],[147,49,144,47],[148,0,145,4],[148,8,145,8,"types"],[148,13,145,13],[148,16,145,16,"getTypesFromConfig"],[148,34,145,34],[148,35,145,35,"config"],[148,41,145,34],[148,42,145,4],[149,0,146,4],[149,8,146,8,"iteratorsNatural"],[149,24,146,24],[149,27,146,27],[149,29,146,4],[150,0,147,4],[150,8,147,8,"iteratorsReverse"],[150,24,147,24],[150,27,147,27],[150,29,147,4],[152,0,149,4],[152,9,149,9],[152,13,149,13,"name"],[152,17,149,4],[152,21,149,21,"types"],[152,26,149,4],[152,28,149,28],[153,0,150,8],[153,10,150,12,"hasOwnProperty"],[153,24,150,26],[153,25,150,27,"call"],[153,29,150,12],[153,30,150,32,"types"],[153,35,150,12],[153,37,150,39,"name"],[153,41,150,12],[153,46,150,48,"types"],[153,51,150,53],[153,52,150,54,"name"],[153,56,150,53],[153,57,150,48],[153,62,150,64],[153,66,150,8],[153,68,150,70],[154,0,151,12,"iteratorsNatural"],[154,8,151,12,"iteratorsNatural"],[154,24,151,28],[154,25,151,29,"name"],[154,29,151,28],[154,30,151,12],[154,33,151,37,"createTypeIterator"],[154,51,151,55],[154,52,151,56,"types"],[154,57,151,61],[154,58,151,62,"name"],[154,62,151,61],[154,63,151,55],[154,65,151,69],[154,70,151,55],[154,71,151,12],[155,0,152,12,"iteratorsReverse"],[155,8,152,12,"iteratorsReverse"],[155,24,152,28],[155,25,152,29,"name"],[155,29,152,28],[155,30,152,12],[155,33,152,37,"createTypeIterator"],[155,51,152,55],[155,52,152,56,"types"],[155,57,152,61],[155,58,152,62,"name"],[155,62,152,61],[155,63,152,55],[155,65,152,69],[155,69,152,55],[155,70,152,12],[156,0,153,9],[157,0,154,5],[159,0,156,4],[159,8,156,8,"fastTraversalIteratorsNatural"],[159,37,156,37],[159,40,156,40,"createFastTraveralMap"],[159,61,156,61],[159,62,156,62,"iteratorsNatural"],[159,78,156,61],[159,79,156,4],[160,0,157,4],[160,8,157,8,"fastTraversalIteratorsReverse"],[160,37,157,37],[160,40,157,40,"createFastTraveralMap"],[160,61,157,61],[160,62,157,62,"iteratorsReverse"],[160,78,157,61],[160,79,157,4],[162,0,159,4],[162,8,159,8,"walk"],[162,12,159,12],[162,15,159,15],[162,24,159,8,"walk"],[162,28,159,15],[162,29,159,24,"root"],[162,33,159,15],[162,35,159,30,"options"],[162,42,159,15],[162,44,159,39],[163,0,160,8],[163,15,160,17,"walkNode"],[163,23,160,8],[163,24,160,26,"node"],[163,28,160,8],[163,30,160,32,"item"],[163,34,160,8],[163,36,160,38,"list"],[163,40,160,8],[163,42,160,44],[164,0,161,12,"enter"],[164,8,161,12,"enter"],[164,13,161,17],[164,14,161,18,"call"],[164,18,161,12],[164,19,161,23,"context"],[164,26,161,12],[164,28,161,32,"node"],[164,32,161,12],[164,34,161,38,"item"],[164,38,161,12],[164,40,161,44,"list"],[164,44,161,12],[166,0,163,12],[166,12,163,16,"iterators"],[166,21,163,25],[166,22,163,26,"hasOwnProperty"],[166,36,163,16],[166,37,163,41,"node"],[166,41,163,45],[166,42,163,46,"type"],[166,46,163,16],[166,47,163,12],[166,49,163,53],[167,0,164,16,"iterators"],[167,10,164,16,"iterators"],[167,19,164,25],[167,20,164,26,"node"],[167,24,164,30],[167,25,164,31,"type"],[167,29,164,25],[167,30,164,16],[167,31,164,37,"node"],[167,35,164,16],[167,37,164,43,"context"],[167,44,164,16],[167,46,164,52,"walkNode"],[167,54,164,16],[168,0,165,13],[170,0,167,12,"leave"],[170,8,167,12,"leave"],[170,13,167,17],[170,14,167,18,"call"],[170,18,167,12],[170,19,167,23,"context"],[170,26,167,12],[170,28,167,32,"node"],[170,32,167,12],[170,34,167,38,"item"],[170,38,167,12],[170,40,167,44,"list"],[170,44,167,12],[171,0,168,9],[173,0,170,8],[173,10,170,12,"enter"],[173,15,170,17],[173,18,170,20,"noop"],[173,22,170,8],[174,0,171,8],[174,10,171,12,"leave"],[174,15,171,17],[174,18,171,20,"noop"],[174,22,171,8],[175,0,172,8],[175,10,172,12,"iterators"],[175,19,172,21],[175,22,172,24,"iteratorsNatural"],[175,38,172,8],[176,0,173,8],[176,10,173,12,"context"],[176,17,173,19],[176,20,173,22],[177,0,174,12,"root"],[177,8,174,12,"root"],[177,12,174,16],[177,14,174,18,"root"],[177,18,173,22],[178,0,175,12,"stylesheet"],[178,8,175,12,"stylesheet"],[178,18,175,22],[178,20,175,24],[178,24,173,22],[179,0,176,12,"atrule"],[179,8,176,12,"atrule"],[179,14,176,18],[179,16,176,20],[179,20,173,22],[180,0,177,12,"atrulePrelude"],[180,8,177,12,"atrulePrelude"],[180,21,177,25],[180,23,177,27],[180,27,173,22],[181,0,178,12,"rule"],[181,8,178,12,"rule"],[181,12,178,16],[181,14,178,18],[181,18,173,22],[182,0,179,12,"selector"],[182,8,179,12,"selector"],[182,16,179,20],[182,18,179,22],[182,22,173,22],[183,0,180,12,"block"],[183,8,180,12,"block"],[183,13,180,17],[183,15,180,19],[183,19,173,22],[184,0,181,12,"declaration"],[184,8,181,12,"declaration"],[184,19,181,23],[184,21,181,25],[184,25,173,22],[185,0,182,12,"function"],[185,8,182,12,"function"],[185,16,182,20],[185,18,182,22],[186,0,173,22],[186,7,173,8],[188,0,185,8],[188,10,185,12],[188,17,185,19,"options"],[188,24,185,12],[188,29,185,31],[188,39,185,8],[188,41,185,43],[189,0,186,12,"enter"],[189,8,186,12,"enter"],[189,13,186,17],[189,16,186,20,"options"],[189,23,186,12],[190,0,187,9],[190,7,185,8],[190,13,187,15],[190,17,187,19,"options"],[190,24,187,15],[190,26,187,28],[191,0,188,12,"enter"],[191,8,188,12,"enter"],[191,13,188,17],[191,16,188,20,"ensureFunction"],[191,30,188,34],[191,31,188,35,"options"],[191,38,188,42],[191,39,188,43,"enter"],[191,44,188,34],[191,45,188,12],[192,0,189,12,"leave"],[192,8,189,12,"leave"],[192,13,189,17],[192,16,189,20,"ensureFunction"],[192,30,189,34],[192,31,189,35,"options"],[192,38,189,42],[192,39,189,43,"leave"],[192,44,189,34],[192,45,189,12],[194,0,191,12],[194,12,191,16,"options"],[194,19,191,23],[194,20,191,24,"reverse"],[194,27,191,12],[194,29,191,33],[195,0,192,16,"iterators"],[195,10,192,16,"iterators"],[195,19,192,25],[195,22,192,28,"iteratorsReverse"],[195,38,192,16],[196,0,193,13],[198,0,195,12],[198,12,195,16,"options"],[198,19,195,23],[198,20,195,24,"visit"],[198,25,195,12],[198,27,195,31],[199,0,196,16],[199,14,196,20,"fastTraversalIteratorsNatural"],[199,43,196,49],[199,44,196,50,"hasOwnProperty"],[199,58,196,20],[199,59,196,65,"options"],[199,66,196,72],[199,67,196,73,"visit"],[199,72,196,20],[199,73,196,16],[199,75,196,81],[200,0,197,20,"iterators"],[200,12,197,20,"iterators"],[200,21,197,29],[200,24,197,32,"options"],[200,31,197,39],[200,32,197,40,"reverse"],[200,39,197,32],[200,42,198,26,"fastTraversalIteratorsReverse"],[200,71,198,55],[200,72,198,56,"options"],[200,79,198,63],[200,80,198,64,"visit"],[200,85,198,55],[200,86,197,32],[200,89,199,26,"fastTraversalIteratorsNatural"],[200,118,199,55],[200,119,199,56,"options"],[200,126,199,63],[200,127,199,64,"visit"],[200,132,199,55],[200,133,197,20],[201,0,200,17],[201,11,196,16],[201,17,200,23],[201,21,200,27],[201,22,200,28,"types"],[201,27,200,33],[201,28,200,34,"hasOwnProperty"],[201,42,200,28],[201,43,200,49,"options"],[201,50,200,56],[201,51,200,57,"visit"],[201,56,200,28],[201,57,200,23],[201,59,200,65],[202,0,201,20],[202,18,201,26],[202,22,201,30,"Error"],[202,27,201,26],[202,28,201,36],[202,44,201,52,"options"],[202,51,201,59],[202,52,201,60,"visit"],[202,57,201,36],[202,60,201,68],[202,95,201,36],[202,98,201,106,"Object"],[202,104,201,112],[202,105,201,113,"keys"],[202,109,201,106],[202,110,201,118,"types"],[202,115,201,106],[202,117,201,125,"join"],[202,121,201,106],[202,122,201,130],[202,126,201,106],[202,127,201,36],[202,130,201,138],[202,133,201,26],[202,134,201,20],[203,0,202,17],[205,0,204,16,"enter"],[205,10,204,16,"enter"],[205,15,204,21],[205,18,204,24,"invokeForType"],[205,31,204,37],[205,32,204,38,"enter"],[205,37,204,37],[205,39,204,45,"options"],[205,46,204,52],[205,47,204,53,"visit"],[205,52,204,37],[205,53,204,16],[206,0,205,16,"leave"],[206,10,205,16,"leave"],[206,15,205,21],[206,18,205,24,"invokeForType"],[206,31,205,37],[206,32,205,38,"leave"],[206,37,205,37],[206,39,205,45,"options"],[206,46,205,52],[206,47,205,53,"visit"],[206,52,205,37],[206,53,205,16],[207,0,206,13],[208,0,207,9],[210,0,209,8],[210,10,209,12,"enter"],[210,15,209,17],[210,20,209,22,"noop"],[210,24,209,12],[210,28,209,30,"leave"],[210,33,209,35],[210,38,209,40,"noop"],[210,42,209,8],[210,44,209,46],[211,0,210,12],[211,14,210,18],[211,18,210,22,"Error"],[211,23,210,18],[211,24,210,28],[211,102,210,18],[211,103,210,12],[212,0,211,9],[214,0,214,8],[214,10,214,12,"options"],[214,17,214,19],[214,18,214,20,"reverse"],[214,25,214,8],[214,27,214,29],[215,0,215,12],[215,12,215,16,"tmp"],[215,15,215,19],[215,18,215,22,"enter"],[215,23,215,12],[216,0,216,12,"enter"],[216,8,216,12,"enter"],[216,13,216,17],[216,16,216,20,"leave"],[216,21,216,12],[217,0,217,12,"leave"],[217,8,217,12,"leave"],[217,13,217,17],[217,16,217,20,"tmp"],[217,19,217,12],[218,0,218,9],[220,0,220,8,"walkNode"],[220,6,220,8,"walkNode"],[220,14,220,16],[220,15,220,17,"root"],[220,19,220,16],[220,20,220,8],[221,0,221,5],[221,5,159,4],[223,0,223,4,"walk"],[223,4,223,4,"walk"],[223,8,223,8],[223,9,223,9,"find"],[223,13,223,4],[223,16,223,16],[223,26,223,25,"ast"],[223,29,223,16],[223,31,223,30,"fn"],[223,33,223,16],[223,35,223,34],[224,0,224,8],[224,10,224,12,"found"],[224,15,224,17],[224,18,224,20],[224,22,224,8],[225,0,226,8,"walk"],[225,6,226,8,"walk"],[225,10,226,12],[225,11,226,13,"ast"],[225,14,226,12],[225,16,226,18],[225,26,226,27,"node"],[225,30,226,18],[225,32,226,33,"item"],[225,36,226,18],[225,38,226,39,"list"],[225,42,226,18],[225,44,226,45],[226,0,227,12],[226,12,227,16,"found"],[226,17,227,21],[226,22,227,26],[226,26,227,16],[226,30,227,34,"fn"],[226,32,227,36],[226,33,227,37,"call"],[226,37,227,34],[226,38,227,42],[226,42,227,34],[226,44,227,48,"node"],[226,48,227,34],[226,50,227,54,"item"],[226,54,227,34],[226,56,227,60,"list"],[226,60,227,34],[226,61,227,12],[226,63,227,67],[227,0,228,16,"found"],[227,10,228,16,"found"],[227,15,228,21],[227,18,228,24,"node"],[227,22,228,16],[228,0,229,13],[229,0,230,9],[229,7,226,12],[229,8,226,8],[230,0,232,8],[230,13,232,15,"found"],[230,18,232,8],[231,0,233,5],[231,5,223,4],[233,0,235,4,"walk"],[233,4,235,4,"walk"],[233,8,235,8],[233,9,235,9,"findLast"],[233,17,235,4],[233,20,235,20],[233,30,235,29,"ast"],[233,33,235,20],[233,35,235,34,"fn"],[233,37,235,20],[233,39,235,38],[234,0,236,8],[234,10,236,12,"found"],[234,15,236,17],[234,18,236,20],[234,22,236,8],[235,0,238,8,"walk"],[235,6,238,8,"walk"],[235,10,238,12],[235,11,238,13,"ast"],[235,14,238,12],[235,16,238,18],[236,0,239,12,"reverse"],[236,8,239,12,"reverse"],[236,15,239,19],[236,17,239,21],[236,21,238,18],[237,0,240,12,"enter"],[237,8,240,12,"enter"],[237,13,240,17],[237,15,240,19],[237,30,240,28,"node"],[237,34,240,19],[237,36,240,34,"item"],[237,40,240,19],[237,42,240,40,"list"],[237,46,240,19],[237,48,240,46],[238,0,241,16],[238,14,241,20,"found"],[238,19,241,25],[238,24,241,30],[238,28,241,20],[238,32,241,38,"fn"],[238,34,241,40],[238,35,241,41,"call"],[238,39,241,38],[238,40,241,46],[238,44,241,38],[238,46,241,52,"node"],[238,50,241,38],[238,52,241,58,"item"],[238,56,241,38],[238,58,241,64,"list"],[238,62,241,38],[238,63,241,16],[238,65,241,71],[239,0,242,20,"found"],[239,12,242,20,"found"],[239,17,242,25],[239,20,242,28,"node"],[239,24,242,20],[240,0,243,17],[241,0,244,13],[242,0,238,18],[242,7,238,12],[242,8,238,8],[243,0,247,8],[243,13,247,15,"found"],[243,18,247,8],[244,0,248,5],[244,5,235,4],[246,0,250,4,"walk"],[246,4,250,4,"walk"],[246,8,250,8],[246,9,250,9,"findAll"],[246,16,250,4],[246,19,250,19],[246,29,250,28,"ast"],[246,32,250,19],[246,34,250,33,"fn"],[246,36,250,19],[246,38,250,37],[247,0,251,8],[247,10,251,12,"found"],[247,15,251,17],[247,18,251,20],[247,20,251,8],[248,0,253,8,"walk"],[248,6,253,8,"walk"],[248,10,253,12],[248,11,253,13,"ast"],[248,14,253,12],[248,16,253,18],[248,26,253,27,"node"],[248,30,253,18],[248,32,253,33,"item"],[248,36,253,18],[248,38,253,39,"list"],[248,42,253,18],[248,44,253,45],[249,0,254,12],[249,12,254,16,"fn"],[249,14,254,18],[249,15,254,19,"call"],[249,19,254,16],[249,20,254,24],[249,24,254,16],[249,26,254,30,"node"],[249,30,254,16],[249,32,254,36,"item"],[249,36,254,16],[249,38,254,42,"list"],[249,42,254,16],[249,43,254,12],[249,45,254,49],[250,0,255,16,"found"],[250,10,255,16,"found"],[250,15,255,21],[250,16,255,22,"push"],[250,20,255,16],[250,21,255,27,"node"],[250,25,255,16],[251,0,256,13],[252,0,257,9],[252,7,253,12],[252,8,253,8],[253,0,259,8],[253,13,259,15,"found"],[253,18,259,8],[254,0,260,5],[254,5,250,4],[256,0,262,4],[256,11,262,11,"walk"],[256,15,262,4],[257,0,263,1],[257,3,144,0]],"functionMap":{"names":["<global>","noop","ensureFunction","invokeForType","<anonymous>","getWalkersFromStructure","getTypesFromConfig","createTypeIterator","createFastTraveralMap","createWalker","walk","walkNode","walk.find","walk$argument_1","walk.findLast","walk$argument_1.enter","walk.findAll"],"mappings":"AAA;WCC,aD;AEE;CFE;AGE;WCC;KDI;CHC;AKE;CL4C;AME;CNgB;AOE;WHS;KG4B;CPC;AQE;CRsB;iBSE;eCe;QCC;SDQ;KDqD;gBGE;kBCG;SDI;KHG;oBKE;mBCK;aDI;KLI;mBOE;kBHG;SGI;KPG;CTG"}},"type":"js/module"}]}