{"dependencies":[{"name":"./error","data":{"isAsync":false}},{"name":"../utils/names","data":{"isAsync":false}},{"name":"./generic","data":{"isAsync":false}},{"name":"../definition-syntax/parse","data":{"isAsync":false}},{"name":"../definition-syntax/generate","data":{"isAsync":false}},{"name":"../definition-syntax/walk","data":{"isAsync":false}},{"name":"./prepare-tokens","data":{"isAsync":false}},{"name":"./match-graph","data":{"isAsync":false}},{"name":"./match","data":{"isAsync":false}},{"name":"./trace","data":{"isAsync":false}},{"name":"./search","data":{"isAsync":false}},{"name":"./structure","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var SyntaxReferenceError = _$$_REQUIRE(_dependencyMap[0], \"./error\").SyntaxReferenceError;\n\n  var MatchError = _$$_REQUIRE(_dependencyMap[0], \"./error\").MatchError;\n\n  var names = _$$_REQUIRE(_dependencyMap[1], \"../utils/names\");\n\n  var generic = _$$_REQUIRE(_dependencyMap[2], \"./generic\");\n\n  var parse = _$$_REQUIRE(_dependencyMap[3], \"../definition-syntax/parse\");\n\n  var generate = _$$_REQUIRE(_dependencyMap[4], \"../definition-syntax/generate\");\n\n  var walk = _$$_REQUIRE(_dependencyMap[5], \"../definition-syntax/walk\");\n\n  var prepareTokens = _$$_REQUIRE(_dependencyMap[6], \"./prepare-tokens\");\n\n  var buildMatchGraph = _$$_REQUIRE(_dependencyMap[7], \"./match-graph\").buildMatchGraph;\n\n  var matchAsTree = _$$_REQUIRE(_dependencyMap[8], \"./match\").matchAsTree;\n\n  var trace = _$$_REQUIRE(_dependencyMap[9], \"./trace\");\n\n  var search = _$$_REQUIRE(_dependencyMap[10], \"./search\");\n\n  var getStructureFromConfig = _$$_REQUIRE(_dependencyMap[11], \"./structure\").getStructureFromConfig;\n\n  var cssWideKeywords = buildMatchGraph('inherit | initial | unset');\n  var cssWideKeywordsWithExpression = buildMatchGraph('inherit | initial | unset | <-ms-legacy-expression>');\n\n  function dumpMapSyntax(map, compact, syntaxAsAst) {\n    var result = {};\n\n    for (var name in map) {\n      if (map[name].syntax) {\n        result[name] = syntaxAsAst ? map[name].syntax : generate(map[name].syntax, {\n          compact: compact\n        });\n      }\n    }\n\n    return result;\n  }\n\n  function valueHasVar(tokens) {\n    for (var i = 0; i < tokens.length; i++) {\n      if (tokens[i].value.toLowerCase() === 'var(') {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  function buildMatchResult(match, error, iterations) {\n    return {\n      matched: match,\n      iterations: iterations,\n      error: error,\n      getTrace: trace.getTrace,\n      isType: trace.isType,\n      isProperty: trace.isProperty,\n      isKeyword: trace.isKeyword\n    };\n  }\n\n  function matchSyntax(lexer, syntax, value, useCommon) {\n    var tokens = prepareTokens(value, lexer.syntax);\n    var result;\n\n    if (valueHasVar(tokens)) {\n      return buildMatchResult(null, new Error('Matching for a tree with var() is not supported'));\n    }\n\n    if (useCommon) {\n      result = matchAsTree(tokens, lexer.valueCommonSyntax, lexer);\n    }\n\n    if (!useCommon || !result.match) {\n      result = matchAsTree(tokens, syntax.match, lexer);\n\n      if (!result.match) {\n        return buildMatchResult(null, new MatchError(result.reason, syntax.syntax, value, result), result.iterations);\n      }\n    }\n\n    return buildMatchResult(result.match, null, result.iterations);\n  }\n\n  var Lexer = function Lexer(config, syntax, structure) {\n    this.valueCommonSyntax = cssWideKeywords;\n    this.syntax = syntax;\n    this.generic = false;\n    this.atrules = {};\n    this.properties = {};\n    this.types = {};\n    this.structure = structure || getStructureFromConfig(config);\n\n    if (config) {\n      if (config.types) {\n        for (var name in config.types) {\n          this.addType_(name, config.types[name]);\n        }\n      }\n\n      if (config.generic) {\n        this.generic = true;\n\n        for (var name in generic) {\n          this.addType_(name, generic[name]);\n        }\n      }\n\n      if (config.atrules) {\n        for (var name in config.atrules) {\n          this.addAtrule_(name, config.atrules[name]);\n        }\n      }\n\n      if (config.properties) {\n        for (var name in config.properties) {\n          this.addProperty_(name, config.properties[name]);\n        }\n      }\n    }\n  };\n\n  Lexer.prototype = {\n    structure: {},\n    checkStructure: function checkStructure(ast) {\n      function collectWarning(node, message) {\n        warns.push({\n          node: node,\n          message: message\n        });\n      }\n\n      var structure = this.structure;\n      var warns = [];\n      this.syntax.walk(ast, function (node) {\n        if (structure.hasOwnProperty(node.type)) {\n          structure[node.type].check(node, collectWarning);\n        } else {\n          collectWarning(node, 'Unknown node type `' + node.type + '`');\n        }\n      });\n      return warns.length ? warns : false;\n    },\n    createDescriptor: function createDescriptor(syntax, type, name) {\n      var ref = {\n        type: type,\n        name: name\n      };\n      var descriptor = {\n        type: type,\n        name: name,\n        syntax: null,\n        match: null\n      };\n\n      if (typeof syntax === 'function') {\n        descriptor.match = buildMatchGraph(syntax, ref);\n      } else {\n        if (typeof syntax === 'string') {\n          Object.defineProperty(descriptor, 'syntax', {\n            get: function get() {\n              Object.defineProperty(descriptor, 'syntax', {\n                value: parse(syntax)\n              });\n              return descriptor.syntax;\n            }\n          });\n        } else {\n          descriptor.syntax = syntax;\n        }\n\n        Object.defineProperty(descriptor, 'match', {\n          get: function get() {\n            Object.defineProperty(descriptor, 'match', {\n              value: buildMatchGraph(descriptor.syntax, ref)\n            });\n            return descriptor.match;\n          }\n        });\n      }\n\n      return descriptor;\n    },\n    addAtrule_: function addAtrule_(name, syntax) {\n      var _this = this;\n\n      this.atrules[name] = {\n        prelude: syntax.prelude ? this.createDescriptor(syntax.prelude, 'AtrulePrelude', name) : null,\n        descriptors: syntax.descriptors ? Object.keys(syntax.descriptors).reduce(function (res, name) {\n          res[name] = _this.createDescriptor(syntax.descriptors[name], 'AtruleDescriptor', name);\n          return res;\n        }, {}) : null\n      };\n    },\n    addProperty_: function addProperty_(name, syntax) {\n      this.properties[name] = this.createDescriptor(syntax, 'Property', name);\n    },\n    addType_: function addType_(name, syntax) {\n      this.types[name] = this.createDescriptor(syntax, 'Type', name);\n\n      if (syntax === generic['-ms-legacy-expression']) {\n        this.valueCommonSyntax = cssWideKeywordsWithExpression;\n      }\n    },\n    matchAtrulePrelude: function matchAtrulePrelude(atruleName, prelude) {\n      var atrule = names.keyword(atruleName);\n      var atrulePreludeSyntax = atrule.vendor ? this.getAtrulePrelude(atrule.name) || this.getAtrulePrelude(atrule.basename) : this.getAtrulePrelude(atrule.name);\n\n      if (!atrulePreludeSyntax) {\n        if (atrule.basename in this.atrules) {\n          return buildMatchResult(null, new Error('At-rule `' + atruleName + '` should not contain a prelude'));\n        }\n\n        return buildMatchResult(null, new SyntaxReferenceError('Unknown at-rule', atruleName));\n      }\n\n      return matchSyntax(this, atrulePreludeSyntax, prelude, true);\n    },\n    matchAtruleDescriptor: function matchAtruleDescriptor(atruleName, descriptorName, value) {\n      var atrule = names.keyword(atruleName);\n      var descriptor = names.keyword(descriptorName);\n      var atruleEntry = atrule.vendor ? this.atrules[atrule.name] || this.atrules[atrule.basename] : this.atrules[atrule.name];\n\n      if (!atruleEntry) {\n        return buildMatchResult(null, new SyntaxReferenceError('Unknown at-rule', atruleName));\n      }\n\n      if (!atruleEntry.descriptors) {\n        return buildMatchResult(null, new Error('At-rule `' + atruleName + '` has no known descriptors'));\n      }\n\n      var atruleDescriptorSyntax = descriptor.vendor ? atruleEntry.descriptors[descriptor.name] || atruleEntry.descriptors[descriptor.basename] : atruleEntry.descriptors[descriptor.name];\n\n      if (!atruleDescriptorSyntax) {\n        return buildMatchResult(null, new SyntaxReferenceError('Unknown at-rule descriptor', descriptorName));\n      }\n\n      return matchSyntax(this, atruleDescriptorSyntax, value, true);\n    },\n    matchDeclaration: function matchDeclaration(node) {\n      if (node.type !== 'Declaration') {\n        return buildMatchResult(null, new Error('Not a Declaration node'));\n      }\n\n      return this.matchProperty(node.property, node.value);\n    },\n    matchProperty: function matchProperty(propertyName, value) {\n      var property = names.property(propertyName);\n\n      if (property.custom) {\n        return buildMatchResult(null, new Error('Lexer matching doesn\\'t applicable for custom properties'));\n      }\n\n      var propertySyntax = property.vendor ? this.getProperty(property.name) || this.getProperty(property.basename) : this.getProperty(property.name);\n\n      if (!propertySyntax) {\n        return buildMatchResult(null, new SyntaxReferenceError('Unknown property', propertyName));\n      }\n\n      return matchSyntax(this, propertySyntax, value, true);\n    },\n    matchType: function matchType(typeName, value) {\n      var typeSyntax = this.getType(typeName);\n\n      if (!typeSyntax) {\n        return buildMatchResult(null, new SyntaxReferenceError('Unknown type', typeName));\n      }\n\n      return matchSyntax(this, typeSyntax, value, false);\n    },\n    match: function match(syntax, value) {\n      if (typeof syntax !== 'string' && (!syntax || !syntax.type)) {\n        return buildMatchResult(null, new SyntaxReferenceError('Bad syntax'));\n      }\n\n      if (typeof syntax === 'string' || !syntax.match) {\n        syntax = this.createDescriptor(syntax, 'Type', 'anonymous');\n      }\n\n      return matchSyntax(this, syntax, value, false);\n    },\n    findValueFragments: function findValueFragments(propertyName, value, type, name) {\n      return search.matchFragments(this, value, this.matchProperty(propertyName, value), type, name);\n    },\n    findDeclarationValueFragments: function findDeclarationValueFragments(declaration, type, name) {\n      return search.matchFragments(this, declaration.value, this.matchDeclaration(declaration), type, name);\n    },\n    findAllFragments: function findAllFragments(ast, type, name) {\n      var result = [];\n      this.syntax.walk(ast, {\n        visit: 'Declaration',\n        enter: function (declaration) {\n          result.push.apply(result, this.findDeclarationValueFragments(declaration, type, name));\n        }.bind(this)\n      });\n      return result;\n    },\n    getAtrulePrelude: function getAtrulePrelude(atruleName) {\n      return this.atrules.hasOwnProperty(atruleName) ? this.atrules[atruleName].prelude : null;\n    },\n    getAtruleDescriptor: function getAtruleDescriptor(atruleName, name) {\n      return this.atrules.hasOwnProperty(atruleName) && this.atrules.declarators ? this.atrules[atruleName].declarators[name] || null : null;\n    },\n    getProperty: function getProperty(name) {\n      return this.properties.hasOwnProperty(name) ? this.properties[name] : null;\n    },\n    getType: function getType(name) {\n      return this.types.hasOwnProperty(name) ? this.types[name] : null;\n    },\n    validate: function validate() {\n      function validate(syntax, name, broken, descriptor) {\n        if (broken.hasOwnProperty(name)) {\n          return broken[name];\n        }\n\n        broken[name] = false;\n\n        if (descriptor.syntax !== null) {\n          walk(descriptor.syntax, function (node) {\n            if (node.type !== 'Type' && node.type !== 'Property') {\n              return;\n            }\n\n            var map = node.type === 'Type' ? syntax.types : syntax.properties;\n            var brokenMap = node.type === 'Type' ? brokenTypes : brokenProperties;\n\n            if (!map.hasOwnProperty(node.name) || validate(syntax, node.name, brokenMap, map[node.name])) {\n              broken[name] = true;\n            }\n          }, this);\n        }\n      }\n\n      var brokenTypes = {};\n      var brokenProperties = {};\n\n      for (var key in this.types) {\n        validate(this, key, brokenTypes, this.types[key]);\n      }\n\n      for (var key in this.properties) {\n        validate(this, key, brokenProperties, this.properties[key]);\n      }\n\n      brokenTypes = Object.keys(brokenTypes).filter(function (name) {\n        return brokenTypes[name];\n      });\n      brokenProperties = Object.keys(brokenProperties).filter(function (name) {\n        return brokenProperties[name];\n      });\n\n      if (brokenTypes.length || brokenProperties.length) {\n        return {\n          types: brokenTypes,\n          properties: brokenProperties\n        };\n      }\n\n      return null;\n    },\n    dump: function dump(syntaxAsAst, pretty) {\n      return {\n        generic: this.generic,\n        types: dumpMapSyntax(this.types, !pretty, syntaxAsAst),\n        properties: dumpMapSyntax(this.properties, !pretty, syntaxAsAst)\n      };\n    },\n    toString: function toString() {\n      return JSON.stringify(this.dump());\n    }\n  };\n  module.exports = Lexer;\n});","lineCount":378,"map":[[2,0,1,0],[2,6,1,4,"SyntaxReferenceError"],[2,26,1,24],[2,29,1,27,"require"],[2,40,1,34],[2,70,1,27],[2,71,1,46,"SyntaxReferenceError"],[2,91,1,0],[4,0,2,0],[4,6,2,4,"MatchError"],[4,16,2,14],[4,19,2,17,"require"],[4,30,2,24],[4,60,2,17],[4,61,2,36,"MatchError"],[4,71,2,0],[6,0,3,0],[6,6,3,4,"names"],[6,11,3,9],[6,14,3,12,"require"],[6,25,3,19],[6,62,3,0],[8,0,4,0],[8,6,4,4,"generic"],[8,13,4,11],[8,16,4,14,"require"],[8,27,4,21],[8,59,4,0],[10,0,5,0],[10,6,5,4,"parse"],[10,11,5,9],[10,14,5,12,"require"],[10,25,5,19],[10,74,5,0],[12,0,6,0],[12,6,6,4,"generate"],[12,14,6,12],[12,17,6,15,"require"],[12,28,6,22],[12,80,6,0],[14,0,7,0],[14,6,7,4,"walk"],[14,10,7,8],[14,13,7,11,"require"],[14,24,7,18],[14,72,7,0],[16,0,8,0],[16,6,8,4,"prepareTokens"],[16,19,8,17],[16,22,8,20,"require"],[16,33,8,27],[16,72,8,0],[18,0,9,0],[18,6,9,4,"buildMatchGraph"],[18,21,9,19],[18,24,9,22,"require"],[18,35,9,29],[18,71,9,22],[18,72,9,47,"buildMatchGraph"],[18,87,9,0],[20,0,10,0],[20,6,10,4,"matchAsTree"],[20,17,10,15],[20,20,10,18,"require"],[20,31,10,25],[20,61,10,18],[20,62,10,37,"matchAsTree"],[20,73,10,0],[22,0,11,0],[22,6,11,4,"trace"],[22,11,11,9],[22,14,11,12,"require"],[22,25,11,19],[22,55,11,0],[24,0,12,0],[24,6,12,4,"search"],[24,12,12,10],[24,15,12,13,"require"],[24,26,12,20],[24,58,12,0],[26,0,13,0],[26,6,13,4,"getStructureFromConfig"],[26,28,13,26],[26,31,13,29,"require"],[26,42,13,36],[26,77,13,29],[26,78,13,52,"getStructureFromConfig"],[26,100,13,0],[28,0,14,0],[28,6,14,4,"cssWideKeywords"],[28,21,14,19],[28,24,14,22,"buildMatchGraph"],[28,39,14,37],[28,40,14,38],[28,67,14,37],[28,68,14,0],[29,0,15,0],[29,6,15,4,"cssWideKeywordsWithExpression"],[29,35,15,33],[29,38,15,36,"buildMatchGraph"],[29,53,15,51],[29,54,15,52],[29,107,15,51],[29,108,15,0],[31,0,17,0],[31,11,17,9,"dumpMapSyntax"],[31,24,17,0],[31,25,17,23,"map"],[31,28,17,0],[31,30,17,28,"compact"],[31,37,17,0],[31,39,17,37,"syntaxAsAst"],[31,50,17,0],[31,52,17,50],[32,0,18,4],[32,8,18,8,"result"],[32,14,18,14],[32,17,18,17],[32,19,18,4],[34,0,20,4],[34,9,20,9],[34,13,20,13,"name"],[34,17,20,4],[34,21,20,21,"map"],[34,24,20,4],[34,26,20,26],[35,0,21,8],[35,10,21,12,"map"],[35,13,21,15],[35,14,21,16,"name"],[35,18,21,15],[35,19,21,12],[35,20,21,22,"syntax"],[35,26,21,8],[35,28,21,30],[36,0,22,12,"result"],[36,8,22,12,"result"],[36,14,22,18],[36,15,22,19,"name"],[36,19,22,18],[36,20,22,12],[36,23,22,27,"syntaxAsAst"],[36,34,22,38],[36,37,23,18,"map"],[36,40,23,21],[36,41,23,22,"name"],[36,45,23,21],[36,46,23,18],[36,47,23,28,"syntax"],[36,53,22,38],[36,56,24,18,"generate"],[36,64,24,26],[36,65,24,27,"map"],[36,68,24,30],[36,69,24,31,"name"],[36,73,24,30],[36,74,24,27],[36,75,24,37,"syntax"],[36,81,24,26],[36,83,24,45],[37,0,24,47,"compact"],[37,10,24,47,"compact"],[37,17,24,54],[37,19,24,56,"compact"],[38,0,24,45],[38,9,24,26],[38,10,22,12],[39,0,25,9],[40,0,26,5],[42,0,28,4],[42,11,28,11,"result"],[42,17,28,4],[43,0,29,1],[45,0,31,0],[45,11,31,9,"valueHasVar"],[45,22,31,0],[45,23,31,21,"tokens"],[45,29,31,0],[45,31,31,29],[46,0,32,4],[46,9,32,9],[46,13,32,13,"i"],[46,14,32,14],[46,17,32,17],[46,18,32,4],[46,20,32,20,"i"],[46,21,32,21],[46,24,32,24,"tokens"],[46,30,32,30],[46,31,32,31,"length"],[46,37,32,4],[46,39,32,39,"i"],[46,40,32,40],[46,42,32,4],[46,44,32,44],[47,0,33,8],[47,10,33,12,"tokens"],[47,16,33,18],[47,17,33,19,"i"],[47,18,33,18],[47,19,33,12],[47,20,33,22,"value"],[47,25,33,12],[47,26,33,28,"toLowerCase"],[47,37,33,12],[47,44,33,46],[47,50,33,8],[47,52,33,54],[48,0,34,12],[48,15,34,19],[48,19,34,12],[49,0,35,9],[50,0,36,5],[52,0,38,4],[52,11,38,11],[52,16,38,4],[53,0,39,1],[55,0,41,0],[55,11,41,9,"buildMatchResult"],[55,27,41,0],[55,28,41,26,"match"],[55,33,41,0],[55,35,41,33,"error"],[55,40,41,0],[55,42,41,40,"iterations"],[55,52,41,0],[55,54,41,52],[56,0,42,4],[56,11,42,11],[57,0,43,8,"matched"],[57,6,43,8,"matched"],[57,13,43,15],[57,15,43,17,"match"],[57,20,42,11],[58,0,44,8,"iterations"],[58,6,44,8,"iterations"],[58,16,44,18],[58,18,44,20,"iterations"],[58,28,42,11],[59,0,45,8,"error"],[59,6,45,8,"error"],[59,11,45,13],[59,13,45,15,"error"],[59,18,42,11],[60,0,46,8,"getTrace"],[60,6,46,8,"getTrace"],[60,14,46,16],[60,16,46,18,"trace"],[60,21,46,23],[60,22,46,24,"getTrace"],[60,30,42,11],[61,0,47,8,"isType"],[61,6,47,8,"isType"],[61,12,47,14],[61,14,47,16,"trace"],[61,19,47,21],[61,20,47,22,"isType"],[61,26,42,11],[62,0,48,8,"isProperty"],[62,6,48,8,"isProperty"],[62,16,48,18],[62,18,48,20,"trace"],[62,23,48,25],[62,24,48,26,"isProperty"],[62,34,42,11],[63,0,49,8,"isKeyword"],[63,6,49,8,"isKeyword"],[63,15,49,17],[63,17,49,19,"trace"],[63,22,49,24],[63,23,49,25,"isKeyword"],[64,0,42,11],[64,5,42,4],[65,0,51,1],[67,0,53,0],[67,11,53,9,"matchSyntax"],[67,22,53,0],[67,23,53,21,"lexer"],[67,28,53,0],[67,30,53,28,"syntax"],[67,36,53,0],[67,38,53,36,"value"],[67,43,53,0],[67,45,53,43,"useCommon"],[67,54,53,0],[67,56,53,54],[68,0,54,4],[68,8,54,8,"tokens"],[68,14,54,14],[68,17,54,17,"prepareTokens"],[68,30,54,30],[68,31,54,31,"value"],[68,36,54,30],[68,38,54,38,"lexer"],[68,43,54,43],[68,44,54,44,"syntax"],[68,50,54,30],[68,51,54,4],[69,0,55,4],[69,8,55,8,"result"],[69,14,55,4],[71,0,57,4],[71,8,57,8,"valueHasVar"],[71,19,57,19],[71,20,57,20,"tokens"],[71,26,57,19],[71,27,57,4],[71,29,57,29],[72,0,58,8],[72,13,58,15,"buildMatchResult"],[72,29,58,31],[72,30,58,32],[72,34,58,31],[72,36,58,38],[72,40,58,42,"Error"],[72,45,58,38],[72,46,58,48],[72,95,58,38],[72,96,58,31],[72,97,58,8],[73,0,59,5],[75,0,61,4],[75,8,61,8,"useCommon"],[75,17,61,4],[75,19,61,19],[76,0,62,8,"result"],[76,6,62,8,"result"],[76,12,62,14],[76,15,62,17,"matchAsTree"],[76,26,62,28],[76,27,62,29,"tokens"],[76,33,62,28],[76,35,62,37,"lexer"],[76,40,62,42],[76,41,62,43,"valueCommonSyntax"],[76,58,62,28],[76,60,62,62,"lexer"],[76,65,62,28],[76,66,62,8],[77,0,63,5],[79,0,65,4],[79,8,65,8],[79,9,65,9,"useCommon"],[79,18,65,8],[79,22,65,22],[79,23,65,23,"result"],[79,29,65,29],[79,30,65,30,"match"],[79,35,65,4],[79,37,65,37],[80,0,66,8,"result"],[80,6,66,8,"result"],[80,12,66,14],[80,15,66,17,"matchAsTree"],[80,26,66,28],[80,27,66,29,"tokens"],[80,33,66,28],[80,35,66,37,"syntax"],[80,41,66,43],[80,42,66,44,"match"],[80,47,66,28],[80,49,66,51,"lexer"],[80,54,66,28],[80,55,66,8],[82,0,67,8],[82,10,67,12],[82,11,67,13,"result"],[82,17,67,19],[82,18,67,20,"match"],[82,23,67,8],[82,25,67,27],[83,0,68,12],[83,15,68,19,"buildMatchResult"],[83,31,68,35],[83,32,69,16],[83,36,68,35],[83,38,70,16],[83,42,70,20,"MatchError"],[83,52,70,16],[83,53,70,31,"result"],[83,59,70,37],[83,60,70,38,"reason"],[83,66,70,16],[83,68,70,46,"syntax"],[83,74,70,52],[83,75,70,53,"syntax"],[83,81,70,16],[83,83,70,61,"value"],[83,88,70,16],[83,90,70,68,"result"],[83,96,70,16],[83,97,68,35],[83,99,71,16,"result"],[83,105,71,22],[83,106,71,23,"iterations"],[83,116,68,35],[83,117,68,12],[84,0,73,9],[85,0,74,5],[87,0,76,4],[87,11,76,11,"buildMatchResult"],[87,27,76,27],[87,28,76,28,"result"],[87,34,76,34],[87,35,76,35,"match"],[87,40,76,27],[87,42,76,42],[87,46,76,27],[87,48,76,48,"result"],[87,54,76,54],[87,55,76,55,"iterations"],[87,65,76,27],[87,66,76,4],[88,0,77,1],[90,0,79,0],[90,6,79,4,"Lexer"],[90,11,79,9],[90,14,79,12],[90,23,79,4,"Lexer"],[90,28,79,12],[90,29,79,21,"config"],[90,35,79,12],[90,37,79,29,"syntax"],[90,43,79,12],[90,45,79,37,"structure"],[90,54,79,12],[90,56,79,48],[91,0,80,4],[91,9,80,9,"valueCommonSyntax"],[91,26,80,4],[91,29,80,29,"cssWideKeywords"],[91,44,80,4],[92,0,81,4],[92,9,81,9,"syntax"],[92,15,81,4],[92,18,81,18,"syntax"],[92,24,81,4],[93,0,82,4],[93,9,82,9,"generic"],[93,16,82,4],[93,19,82,19],[93,24,82,4],[94,0,83,4],[94,9,83,9,"atrules"],[94,16,83,4],[94,19,83,19],[94,21,83,4],[95,0,84,4],[95,9,84,9,"properties"],[95,19,84,4],[95,22,84,22],[95,24,84,4],[96,0,85,4],[96,9,85,9,"types"],[96,14,85,4],[96,17,85,17],[96,19,85,4],[97,0,86,4],[97,9,86,9,"structure"],[97,18,86,4],[97,21,86,21,"structure"],[97,30,86,30],[97,34,86,34,"getStructureFromConfig"],[97,56,86,56],[97,57,86,57,"config"],[97,63,86,56],[97,64,86,4],[99,0,88,4],[99,8,88,8,"config"],[99,14,88,4],[99,16,88,16],[100,0,89,8],[100,10,89,12,"config"],[100,16,89,18],[100,17,89,19,"types"],[100,22,89,8],[100,24,89,26],[101,0,90,12],[101,13,90,17],[101,17,90,21,"name"],[101,21,90,12],[101,25,90,29,"config"],[101,31,90,35],[101,32,90,36,"types"],[101,37,90,12],[101,39,90,43],[102,0,91,16],[102,15,91,21,"addType_"],[102,23,91,16],[102,24,91,30,"name"],[102,28,91,16],[102,30,91,36,"config"],[102,36,91,42],[102,37,91,43,"types"],[102,42,91,36],[102,43,91,49,"name"],[102,47,91,36],[102,48,91,16],[103,0,92,13],[104,0,93,9],[106,0,95,8],[106,10,95,12,"config"],[106,16,95,18],[106,17,95,19,"generic"],[106,24,95,8],[106,26,95,28],[107,0,96,12],[107,13,96,17,"generic"],[107,20,96,12],[107,23,96,27],[107,27,96,12],[109,0,97,12],[109,13,97,17],[109,17,97,21,"name"],[109,21,97,12],[109,25,97,29,"generic"],[109,32,97,12],[109,34,97,38],[110,0,98,16],[110,15,98,21,"addType_"],[110,23,98,16],[110,24,98,30,"name"],[110,28,98,16],[110,30,98,36,"generic"],[110,37,98,43],[110,38,98,44,"name"],[110,42,98,43],[110,43,98,16],[111,0,99,13],[112,0,100,9],[114,0,102,8],[114,10,102,12,"config"],[114,16,102,18],[114,17,102,19,"atrules"],[114,24,102,8],[114,26,102,28],[115,0,103,12],[115,13,103,17],[115,17,103,21,"name"],[115,21,103,12],[115,25,103,29,"config"],[115,31,103,35],[115,32,103,36,"atrules"],[115,39,103,12],[115,41,103,45],[116,0,104,16],[116,15,104,21,"addAtrule_"],[116,25,104,16],[116,26,104,32,"name"],[116,30,104,16],[116,32,104,38,"config"],[116,38,104,44],[116,39,104,45,"atrules"],[116,46,104,38],[116,47,104,53,"name"],[116,51,104,38],[116,52,104,16],[117,0,105,13],[118,0,106,9],[120,0,108,8],[120,10,108,12,"config"],[120,16,108,18],[120,17,108,19,"properties"],[120,27,108,8],[120,29,108,31],[121,0,109,12],[121,13,109,17],[121,17,109,21,"name"],[121,21,109,12],[121,25,109,29,"config"],[121,31,109,35],[121,32,109,36,"properties"],[121,42,109,12],[121,44,109,48],[122,0,110,16],[122,15,110,21,"addProperty_"],[122,27,110,16],[122,28,110,34,"name"],[122,32,110,16],[122,34,110,40,"config"],[122,40,110,46],[122,41,110,47,"properties"],[122,51,110,40],[122,52,110,58,"name"],[122,56,110,40],[122,57,110,16],[123,0,111,13],[124,0,112,9],[125,0,113,5],[126,0,114,1],[126,3,79,0],[128,0,116,0,"Lexer"],[128,2,116,0,"Lexer"],[128,7,116,5],[128,8,116,6,"prototype"],[128,17,116,0],[128,20,116,18],[129,0,117,4,"structure"],[129,4,117,4,"structure"],[129,13,117,13],[129,15,117,15],[129,17,116,18],[130,0,118,4,"checkStructure"],[130,4,118,4,"checkStructure"],[130,18,118,18],[130,20,118,20],[130,44,118,29,"ast"],[130,47,118,20],[130,49,118,34],[131,0,119,8],[131,15,119,17,"collectWarning"],[131,29,119,8],[131,30,119,32,"node"],[131,34,119,8],[131,36,119,38,"message"],[131,43,119,8],[131,45,119,47],[132,0,120,12,"warns"],[132,8,120,12,"warns"],[132,13,120,17],[132,14,120,18,"push"],[132,18,120,12],[132,19,120,23],[133,0,121,16,"node"],[133,10,121,16,"node"],[133,14,121,20],[133,16,121,22,"node"],[133,20,120,23],[134,0,122,16,"message"],[134,10,122,16,"message"],[134,17,122,23],[134,19,122,25,"message"],[135,0,120,23],[135,9,120,12],[136,0,124,9],[138,0,126,8],[138,10,126,12,"structure"],[138,19,126,21],[138,22,126,24],[138,27,126,29,"structure"],[138,36,126,8],[139,0,127,8],[139,10,127,12,"warns"],[139,15,127,17],[139,18,127,20],[139,20,127,8],[140,0,129,8],[140,11,129,13,"syntax"],[140,17,129,8],[140,18,129,20,"walk"],[140,22,129,8],[140,23,129,25,"ast"],[140,26,129,8],[140,28,129,30],[140,38,129,39,"node"],[140,42,129,30],[140,44,129,45],[141,0,130,12],[141,12,130,16,"structure"],[141,21,130,25],[141,22,130,26,"hasOwnProperty"],[141,36,130,16],[141,37,130,41,"node"],[141,41,130,45],[141,42,130,46,"type"],[141,46,130,16],[141,47,130,12],[141,49,130,53],[142,0,131,16,"structure"],[142,10,131,16,"structure"],[142,19,131,25],[142,20,131,26,"node"],[142,24,131,30],[142,25,131,31,"type"],[142,29,131,25],[142,30,131,16],[142,31,131,37,"check"],[142,36,131,16],[142,37,131,43,"node"],[142,41,131,16],[142,43,131,49,"collectWarning"],[142,57,131,16],[143,0,132,13],[143,9,130,12],[143,15,132,19],[144,0,133,16,"collectWarning"],[144,10,133,16,"collectWarning"],[144,24,133,30],[144,25,133,31,"node"],[144,29,133,30],[144,31,133,37],[144,55,133,61,"node"],[144,59,133,65],[144,60,133,66,"type"],[144,64,133,37],[144,67,133,73],[144,70,133,30],[144,71,133,16],[145,0,134,13],[146,0,135,9],[146,7,129,8],[147,0,137,8],[147,13,137,15,"warns"],[147,18,137,20],[147,19,137,21,"length"],[147,25,137,15],[147,28,137,30,"warns"],[147,33,137,15],[147,36,137,38],[147,41,137,8],[148,0,138,5],[148,5,116,18],[149,0,140,4,"createDescriptor"],[149,4,140,4,"createDescriptor"],[149,20,140,20],[149,22,140,22],[149,48,140,31,"syntax"],[149,54,140,22],[149,56,140,39,"type"],[149,60,140,22],[149,62,140,45,"name"],[149,66,140,22],[149,68,140,51],[150,0,141,8],[150,10,141,12,"ref"],[150,13,141,15],[150,16,141,18],[151,0,142,12,"type"],[151,8,142,12,"type"],[151,12,142,16],[151,14,142,18,"type"],[151,18,141,18],[152,0,143,12,"name"],[152,8,143,12,"name"],[152,12,143,16],[152,14,143,18,"name"],[153,0,141,18],[153,7,141,8],[154,0,145,8],[154,10,145,12,"descriptor"],[154,20,145,22],[154,23,145,25],[155,0,146,12,"type"],[155,8,146,12,"type"],[155,12,146,16],[155,14,146,18,"type"],[155,18,145,25],[156,0,147,12,"name"],[156,8,147,12,"name"],[156,12,147,16],[156,14,147,18,"name"],[156,18,145,25],[157,0,148,12,"syntax"],[157,8,148,12,"syntax"],[157,14,148,18],[157,16,148,20],[157,20,145,25],[158,0,149,12,"match"],[158,8,149,12,"match"],[158,13,149,17],[158,15,149,19],[159,0,145,25],[159,7,145,8],[161,0,152,8],[161,10,152,12],[161,17,152,19,"syntax"],[161,23,152,12],[161,28,152,30],[161,38,152,8],[161,40,152,42],[162,0,153,12,"descriptor"],[162,8,153,12,"descriptor"],[162,18,153,22],[162,19,153,23,"match"],[162,24,153,12],[162,27,153,31,"buildMatchGraph"],[162,42,153,46],[162,43,153,47,"syntax"],[162,49,153,46],[162,51,153,55,"ref"],[162,54,153,46],[162,55,153,12],[163,0,154,9],[163,7,152,8],[163,13,154,15],[164,0,155,12],[164,12,155,16],[164,19,155,23,"syntax"],[164,25,155,16],[164,30,155,34],[164,38,155,12],[164,40,155,44],[165,0,157,16,"Object"],[165,10,157,16,"Object"],[165,16,157,22],[165,17,157,23,"defineProperty"],[165,31,157,16],[165,32,157,38,"descriptor"],[165,42,157,16],[165,44,157,50],[165,52,157,16],[165,54,157,60],[166,0,158,20,"get"],[166,12,158,20,"get"],[166,15,158,23],[166,17,158,25],[166,32,158,36],[167,0,159,24,"Object"],[167,14,159,24,"Object"],[167,20,159,30],[167,21,159,31,"defineProperty"],[167,35,159,24],[167,36,159,46,"descriptor"],[167,46,159,24],[167,48,159,58],[167,56,159,24],[167,58,159,68],[168,0,160,28,"value"],[168,16,160,28,"value"],[168,21,160,33],[168,23,160,35,"parse"],[168,28,160,40],[168,29,160,41,"syntax"],[168,35,160,40],[169,0,159,68],[169,15,159,24],[170,0,163,24],[170,21,163,31,"descriptor"],[170,31,163,41],[170,32,163,42,"syntax"],[170,38,163,24],[171,0,164,21],[172,0,157,60],[172,11,157,16],[173,0,166,13],[173,9,155,12],[173,15,166,19],[174,0,167,16,"descriptor"],[174,10,167,16,"descriptor"],[174,20,167,26],[174,21,167,27,"syntax"],[174,27,167,16],[174,30,167,36,"syntax"],[174,36,167,16],[175,0,168,13],[177,0,171,12,"Object"],[177,8,171,12,"Object"],[177,14,171,18],[177,15,171,19,"defineProperty"],[177,29,171,12],[177,30,171,34,"descriptor"],[177,40,171,12],[177,42,171,46],[177,49,171,12],[177,51,171,55],[178,0,172,16,"get"],[178,10,172,16,"get"],[178,13,172,19],[178,15,172,21],[178,30,172,32],[179,0,173,20,"Object"],[179,12,173,20,"Object"],[179,18,173,26],[179,19,173,27,"defineProperty"],[179,33,173,20],[179,34,173,42,"descriptor"],[179,44,173,20],[179,46,173,54],[179,53,173,20],[179,55,173,63],[180,0,174,24,"value"],[180,14,174,24,"value"],[180,19,174,29],[180,21,174,31,"buildMatchGraph"],[180,36,174,46],[180,37,174,47,"descriptor"],[180,47,174,57],[180,48,174,58,"syntax"],[180,54,174,46],[180,56,174,66,"ref"],[180,59,174,46],[181,0,173,63],[181,13,173,20],[182,0,177,20],[182,19,177,27,"descriptor"],[182,29,177,37],[182,30,177,38,"match"],[182,35,177,20],[183,0,178,17],[184,0,171,55],[184,9,171,12],[185,0,180,9],[187,0,182,8],[187,13,182,15,"descriptor"],[187,23,182,8],[188,0,183,5],[188,5,116,18],[189,0,184,4,"addAtrule_"],[189,4,184,4,"addAtrule_"],[189,14,184,14],[189,16,184,16],[189,36,184,25,"name"],[189,40,184,16],[189,42,184,31,"syntax"],[189,48,184,16],[189,50,184,39],[190,0,184,39],[192,0,185,8],[192,11,185,13,"atrules"],[192,18,185,8],[192,19,185,21,"name"],[192,23,185,8],[192,27,185,29],[193,0,186,12,"prelude"],[193,8,186,12,"prelude"],[193,15,186,19],[193,17,186,21,"syntax"],[193,23,186,27],[193,24,186,28,"prelude"],[193,31,186,21],[193,34,186,38],[193,39,186,43,"createDescriptor"],[193,55,186,38],[193,56,186,60,"syntax"],[193,62,186,66],[193,63,186,67,"prelude"],[193,70,186,38],[193,72,186,76],[193,87,186,38],[193,89,186,93,"name"],[193,93,186,38],[193,94,186,21],[193,97,186,101],[193,101,185,29],[194,0,187,12,"descriptors"],[194,8,187,12,"descriptors"],[194,19,187,23],[194,21,187,25,"syntax"],[194,27,187,31],[194,28,187,32,"descriptors"],[194,39,187,25],[194,42,188,18,"Object"],[194,48,188,24],[194,49,188,25,"keys"],[194,53,188,18],[194,54,188,30,"syntax"],[194,60,188,36],[194,61,188,37,"descriptors"],[194,72,188,18],[194,74,188,50,"reduce"],[194,80,188,18],[194,81,188,57],[194,91,188,58,"res"],[194,94,188,57],[194,96,188,63,"name"],[194,100,188,57],[194,102,188,72],[195,0,189,20,"res"],[195,10,189,20,"res"],[195,13,189,23],[195,14,189,24,"name"],[195,18,189,23],[195,19,189,20],[195,22,189,32],[195,27,189,36],[195,28,189,37,"createDescriptor"],[195,44,189,32],[195,45,189,54,"syntax"],[195,51,189,60],[195,52,189,61,"descriptors"],[195,63,189,54],[195,64,189,73,"name"],[195,68,189,54],[195,69,189,32],[195,71,189,80],[195,89,189,32],[195,91,189,100,"name"],[195,95,189,32],[195,96,189,20],[196,0,190,20],[196,17,190,27,"res"],[196,20,190,20],[197,0,191,17],[197,9,188,18],[197,11,191,19],[197,13,188,18],[197,14,187,25],[197,17,192,18],[198,0,185,29],[198,7,185,8],[199,0,194,5],[199,5,116,18],[200,0,195,4,"addProperty_"],[200,4,195,4,"addProperty_"],[200,16,195,16],[200,18,195,18],[200,40,195,27,"name"],[200,44,195,18],[200,46,195,33,"syntax"],[200,52,195,18],[200,54,195,41],[201,0,196,8],[201,11,196,13,"properties"],[201,21,196,8],[201,22,196,24,"name"],[201,26,196,8],[201,30,196,32],[201,35,196,37,"createDescriptor"],[201,51,196,32],[201,52,196,54,"syntax"],[201,58,196,32],[201,60,196,62],[201,70,196,32],[201,72,196,74,"name"],[201,76,196,32],[201,77,196,8],[202,0,197,5],[202,5,116,18],[203,0,198,4,"addType_"],[203,4,198,4,"addType_"],[203,12,198,12],[203,14,198,14],[203,32,198,23,"name"],[203,36,198,14],[203,38,198,29,"syntax"],[203,44,198,14],[203,46,198,37],[204,0,199,8],[204,11,199,13,"types"],[204,16,199,8],[204,17,199,19,"name"],[204,21,199,8],[204,25,199,27],[204,30,199,32,"createDescriptor"],[204,46,199,27],[204,47,199,49,"syntax"],[204,53,199,27],[204,55,199,57],[204,61,199,27],[204,63,199,65,"name"],[204,67,199,27],[204,68,199,8],[206,0,201,8],[206,10,201,12,"syntax"],[206,16,201,18],[206,21,201,23,"generic"],[206,28,201,30],[206,29,201,31],[206,52,201,30],[206,53,201,8],[206,55,201,57],[207,0,202,12],[207,13,202,17,"valueCommonSyntax"],[207,30,202,12],[207,33,202,37,"cssWideKeywordsWithExpression"],[207,62,202,12],[208,0,203,9],[209,0,204,5],[209,5,116,18],[210,0,206,4,"matchAtrulePrelude"],[210,4,206,4,"matchAtrulePrelude"],[210,22,206,22],[210,24,206,24],[210,52,206,33,"atruleName"],[210,62,206,24],[210,64,206,45,"prelude"],[210,71,206,24],[210,73,206,54],[211,0,207,8],[211,10,207,12,"atrule"],[211,16,207,18],[211,19,207,21,"names"],[211,24,207,26],[211,25,207,27,"keyword"],[211,32,207,21],[211,33,207,35,"atruleName"],[211,43,207,21],[211,44,207,8],[212,0,209,8],[212,10,209,12,"atrulePreludeSyntax"],[212,29,209,31],[212,32,209,34,"atrule"],[212,38,209,40],[212,39,209,41,"vendor"],[212,45,209,34],[212,48,210,14],[212,53,210,19,"getAtrulePrelude"],[212,69,210,14],[212,70,210,36,"atrule"],[212,76,210,42],[212,77,210,43,"name"],[212,81,210,14],[212,86,210,52],[212,91,210,57,"getAtrulePrelude"],[212,107,210,52],[212,108,210,74,"atrule"],[212,114,210,80],[212,115,210,81,"basename"],[212,123,210,52],[212,124,209,34],[212,127,211,14],[212,132,211,19,"getAtrulePrelude"],[212,148,211,14],[212,149,211,36,"atrule"],[212,155,211,42],[212,156,211,43,"name"],[212,160,211,14],[212,161,209,8],[214,0,213,8],[214,10,213,12],[214,11,213,13,"atrulePreludeSyntax"],[214,30,213,8],[214,32,213,34],[215,0,214,12],[215,12,214,16,"atrule"],[215,18,214,22],[215,19,214,23,"basename"],[215,27,214,16],[215,31,214,35],[215,36,214,40,"atrules"],[215,43,214,12],[215,45,214,49],[216,0,215,16],[216,17,215,23,"buildMatchResult"],[216,33,215,39],[216,34,215,40],[216,38,215,39],[216,40,215,46],[216,44,215,50,"Error"],[216,49,215,46],[216,50,215,56],[216,64,215,70,"atruleName"],[216,74,215,56],[216,77,215,83],[216,109,215,46],[216,110,215,39],[216,111,215,16],[217,0,216,13],[219,0,218,12],[219,15,218,19,"buildMatchResult"],[219,31,218,35],[219,32,218,36],[219,36,218,35],[219,38,218,42],[219,42,218,46,"SyntaxReferenceError"],[219,62,218,42],[219,63,218,67],[219,80,218,42],[219,82,218,86,"atruleName"],[219,92,218,42],[219,93,218,35],[219,94,218,12],[220,0,219,9],[222,0,221,8],[222,13,221,15,"matchSyntax"],[222,24,221,26],[222,25,221,27],[222,29,221,26],[222,31,221,33,"atrulePreludeSyntax"],[222,50,221,26],[222,52,221,54,"prelude"],[222,59,221,26],[222,61,221,63],[222,65,221,26],[222,66,221,8],[223,0,222,5],[223,5,116,18],[224,0,223,4,"matchAtruleDescriptor"],[224,4,223,4,"matchAtruleDescriptor"],[224,25,223,25],[224,27,223,27],[224,58,223,36,"atruleName"],[224,68,223,27],[224,70,223,48,"descriptorName"],[224,84,223,27],[224,86,223,64,"value"],[224,91,223,27],[224,93,223,71],[225,0,224,8],[225,10,224,12,"atrule"],[225,16,224,18],[225,19,224,21,"names"],[225,24,224,26],[225,25,224,27,"keyword"],[225,32,224,21],[225,33,224,35,"atruleName"],[225,43,224,21],[225,44,224,8],[226,0,225,8],[226,10,225,12,"descriptor"],[226,20,225,22],[226,23,225,25,"names"],[226,28,225,30],[226,29,225,31,"keyword"],[226,36,225,25],[226,37,225,39,"descriptorName"],[226,51,225,25],[226,52,225,8],[227,0,227,8],[227,10,227,12,"atruleEntry"],[227,21,227,23],[227,24,227,26,"atrule"],[227,30,227,32],[227,31,227,33,"vendor"],[227,37,227,26],[227,40,228,14],[227,45,228,19,"atrules"],[227,52,228,14],[227,53,228,27,"atrule"],[227,59,228,33],[227,60,228,34,"name"],[227,64,228,14],[227,69,228,43],[227,74,228,48,"atrules"],[227,81,228,43],[227,82,228,56,"atrule"],[227,88,228,62],[227,89,228,63,"basename"],[227,97,228,43],[227,98,227,26],[227,101,229,14],[227,106,229,19,"atrules"],[227,113,229,14],[227,114,229,27,"atrule"],[227,120,229,33],[227,121,229,34,"name"],[227,125,229,14],[227,126,227,8],[229,0,231,8],[229,10,231,12],[229,11,231,13,"atruleEntry"],[229,22,231,8],[229,24,231,26],[230,0,232,12],[230,15,232,19,"buildMatchResult"],[230,31,232,35],[230,32,232,36],[230,36,232,35],[230,38,232,42],[230,42,232,46,"SyntaxReferenceError"],[230,62,232,42],[230,63,232,67],[230,80,232,42],[230,82,232,86,"atruleName"],[230,92,232,42],[230,93,232,35],[230,94,232,12],[231,0,233,9],[233,0,235,8],[233,10,235,12],[233,11,235,13,"atruleEntry"],[233,22,235,24],[233,23,235,25,"descriptors"],[233,34,235,8],[233,36,235,38],[234,0,236,12],[234,15,236,19,"buildMatchResult"],[234,31,236,35],[234,32,236,36],[234,36,236,35],[234,38,236,42],[234,42,236,46,"Error"],[234,47,236,42],[234,48,236,52],[234,62,236,66,"atruleName"],[234,72,236,52],[234,75,236,79],[234,103,236,42],[234,104,236,35],[234,105,236,12],[235,0,237,9],[237,0,239,8],[237,10,239,12,"atruleDescriptorSyntax"],[237,32,239,34],[237,35,239,37,"descriptor"],[237,45,239,47],[237,46,239,48,"vendor"],[237,52,239,37],[237,55,240,14,"atruleEntry"],[237,66,240,25],[237,67,240,26,"descriptors"],[237,78,240,14],[237,79,240,38,"descriptor"],[237,89,240,48],[237,90,240,49,"name"],[237,94,240,14],[237,99,240,58,"atruleEntry"],[237,110,240,69],[237,111,240,70,"descriptors"],[237,122,240,58],[237,123,240,82,"descriptor"],[237,133,240,92],[237,134,240,93,"basename"],[237,142,240,58],[237,143,239,37],[237,146,241,14,"atruleEntry"],[237,157,241,25],[237,158,241,26,"descriptors"],[237,169,241,14],[237,170,241,38,"descriptor"],[237,180,241,48],[237,181,241,49,"name"],[237,185,241,14],[237,186,239,8],[239,0,243,8],[239,10,243,12],[239,11,243,13,"atruleDescriptorSyntax"],[239,33,243,8],[239,35,243,37],[240,0,244,12],[240,15,244,19,"buildMatchResult"],[240,31,244,35],[240,32,244,36],[240,36,244,35],[240,38,244,42],[240,42,244,46,"SyntaxReferenceError"],[240,62,244,42],[240,63,244,67],[240,91,244,42],[240,93,244,97,"descriptorName"],[240,107,244,42],[240,108,244,35],[240,109,244,12],[241,0,245,9],[243,0,247,8],[243,13,247,15,"matchSyntax"],[243,24,247,26],[243,25,247,27],[243,29,247,26],[243,31,247,33,"atruleDescriptorSyntax"],[243,53,247,26],[243,55,247,57,"value"],[243,60,247,26],[243,62,247,64],[243,66,247,26],[243,67,247,8],[244,0,248,5],[244,5,116,18],[245,0,249,4,"matchDeclaration"],[245,4,249,4,"matchDeclaration"],[245,20,249,20],[245,22,249,22],[245,48,249,31,"node"],[245,52,249,22],[245,54,249,37],[246,0,250,8],[246,10,250,12,"node"],[246,14,250,16],[246,15,250,17,"type"],[246,19,250,12],[246,24,250,26],[246,37,250,8],[246,39,250,41],[247,0,251,12],[247,15,251,19,"buildMatchResult"],[247,31,251,35],[247,32,251,36],[247,36,251,35],[247,38,251,42],[247,42,251,46,"Error"],[247,47,251,42],[247,48,251,52],[247,72,251,42],[247,73,251,35],[247,74,251,12],[248,0,252,9],[250,0,254,8],[250,13,254,15],[250,18,254,20,"matchProperty"],[250,31,254,15],[250,32,254,34,"node"],[250,36,254,38],[250,37,254,39,"property"],[250,45,254,15],[250,47,254,49,"node"],[250,51,254,53],[250,52,254,54,"value"],[250,57,254,15],[250,58,254,8],[251,0,255,5],[251,5,116,18],[252,0,256,4,"matchProperty"],[252,4,256,4,"matchProperty"],[252,17,256,17],[252,19,256,19],[252,42,256,28,"propertyName"],[252,54,256,19],[252,56,256,42,"value"],[252,61,256,19],[252,63,256,49],[253,0,257,8],[253,10,257,12,"property"],[253,18,257,20],[253,21,257,23,"names"],[253,26,257,28],[253,27,257,29,"property"],[253,35,257,23],[253,36,257,38,"propertyName"],[253,48,257,23],[253,49,257,8],[255,0,260,8],[255,10,260,12,"property"],[255,18,260,20],[255,19,260,21,"custom"],[255,25,260,8],[255,27,260,29],[256,0,261,12],[256,15,261,19,"buildMatchResult"],[256,31,261,35],[256,32,261,36],[256,36,261,35],[256,38,261,42],[256,42,261,46,"Error"],[256,47,261,42],[256,48,261,52],[256,106,261,42],[256,107,261,35],[256,108,261,12],[257,0,262,9],[259,0,264,8],[259,10,264,12,"propertySyntax"],[259,24,264,26],[259,27,264,29,"property"],[259,35,264,37],[259,36,264,38,"vendor"],[259,42,264,29],[259,45,265,14],[259,50,265,19,"getProperty"],[259,61,265,14],[259,62,265,31,"property"],[259,70,265,39],[259,71,265,40,"name"],[259,75,265,14],[259,80,265,49],[259,85,265,54,"getProperty"],[259,96,265,49],[259,97,265,66,"property"],[259,105,265,74],[259,106,265,75,"basename"],[259,114,265,49],[259,115,264,29],[259,118,266,14],[259,123,266,19,"getProperty"],[259,134,266,14],[259,135,266,31,"property"],[259,143,266,39],[259,144,266,40,"name"],[259,148,266,14],[259,149,264,8],[261,0,268,8],[261,10,268,12],[261,11,268,13,"propertySyntax"],[261,25,268,8],[261,27,268,29],[262,0,269,12],[262,15,269,19,"buildMatchResult"],[262,31,269,35],[262,32,269,36],[262,36,269,35],[262,38,269,42],[262,42,269,46,"SyntaxReferenceError"],[262,62,269,42],[262,63,269,67],[262,81,269,42],[262,83,269,87,"propertyName"],[262,95,269,42],[262,96,269,35],[262,97,269,12],[263,0,270,9],[265,0,272,8],[265,13,272,15,"matchSyntax"],[265,24,272,26],[265,25,272,27],[265,29,272,26],[265,31,272,33,"propertySyntax"],[265,45,272,26],[265,47,272,49,"value"],[265,52,272,26],[265,54,272,56],[265,58,272,26],[265,59,272,8],[266,0,273,5],[266,5,116,18],[267,0,274,4,"matchType"],[267,4,274,4,"matchType"],[267,13,274,13],[267,15,274,15],[267,34,274,24,"typeName"],[267,42,274,15],[267,44,274,34,"value"],[267,49,274,15],[267,51,274,41],[268,0,275,8],[268,10,275,12,"typeSyntax"],[268,20,275,22],[268,23,275,25],[268,28,275,30,"getType"],[268,35,275,25],[268,36,275,38,"typeName"],[268,44,275,25],[268,45,275,8],[270,0,277,8],[270,10,277,12],[270,11,277,13,"typeSyntax"],[270,21,277,8],[270,23,277,25],[271,0,278,12],[271,15,278,19,"buildMatchResult"],[271,31,278,35],[271,32,278,36],[271,36,278,35],[271,38,278,42],[271,42,278,46,"SyntaxReferenceError"],[271,62,278,42],[271,63,278,67],[271,77,278,42],[271,79,278,83,"typeName"],[271,87,278,42],[271,88,278,35],[271,89,278,12],[272,0,279,9],[274,0,281,8],[274,13,281,15,"matchSyntax"],[274,24,281,26],[274,25,281,27],[274,29,281,26],[274,31,281,33,"typeSyntax"],[274,41,281,26],[274,43,281,45,"value"],[274,48,281,26],[274,50,281,52],[274,55,281,26],[274,56,281,8],[275,0,282,5],[275,5,116,18],[276,0,283,4,"match"],[276,4,283,4,"match"],[276,9,283,9],[276,11,283,11],[276,26,283,20,"syntax"],[276,32,283,11],[276,34,283,28,"value"],[276,39,283,11],[276,41,283,35],[277,0,284,8],[277,10,284,12],[277,17,284,19,"syntax"],[277,23,284,12],[277,28,284,30],[277,36,284,12],[277,41,284,43],[277,42,284,44,"syntax"],[277,48,284,43],[277,52,284,54],[277,53,284,55,"syntax"],[277,59,284,61],[277,60,284,62,"type"],[277,64,284,12],[277,65,284,8],[277,67,284,69],[278,0,285,12],[278,15,285,19,"buildMatchResult"],[278,31,285,35],[278,32,285,36],[278,36,285,35],[278,38,285,42],[278,42,285,46,"SyntaxReferenceError"],[278,62,285,42],[278,63,285,67],[278,75,285,42],[278,76,285,35],[278,77,285,12],[279,0,286,9],[281,0,288,8],[281,10,288,12],[281,17,288,19,"syntax"],[281,23,288,12],[281,28,288,30],[281,36,288,12],[281,40,288,42],[281,41,288,43,"syntax"],[281,47,288,49],[281,48,288,50,"match"],[281,53,288,8],[281,55,288,57],[282,0,289,12,"syntax"],[282,8,289,12,"syntax"],[282,14,289,18],[282,17,289,21],[282,22,289,26,"createDescriptor"],[282,38,289,21],[282,39,289,43,"syntax"],[282,45,289,21],[282,47,289,51],[282,53,289,21],[282,55,289,59],[282,66,289,21],[282,67,289,12],[283,0,290,9],[285,0,292,8],[285,13,292,15,"matchSyntax"],[285,24,292,26],[285,25,292,27],[285,29,292,26],[285,31,292,33,"syntax"],[285,37,292,26],[285,39,292,41,"value"],[285,44,292,26],[285,46,292,48],[285,51,292,26],[285,52,292,8],[286,0,293,5],[286,5,116,18],[287,0,295,4,"findValueFragments"],[287,4,295,4,"findValueFragments"],[287,22,295,22],[287,24,295,24],[287,52,295,33,"propertyName"],[287,64,295,24],[287,66,295,47,"value"],[287,71,295,24],[287,73,295,54,"type"],[287,77,295,24],[287,79,295,60,"name"],[287,83,295,24],[287,85,295,66],[288,0,296,8],[288,13,296,15,"search"],[288,19,296,21],[288,20,296,22,"matchFragments"],[288,34,296,15],[288,35,296,37],[288,39,296,15],[288,41,296,43,"value"],[288,46,296,15],[288,48,296,50],[288,53,296,55,"matchProperty"],[288,66,296,50],[288,67,296,69,"propertyName"],[288,79,296,50],[288,81,296,83,"value"],[288,86,296,50],[288,87,296,15],[288,89,296,91,"type"],[288,93,296,15],[288,95,296,97,"name"],[288,99,296,15],[288,100,296,8],[289,0,297,5],[289,5,116,18],[290,0,298,4,"findDeclarationValueFragments"],[290,4,298,4,"findDeclarationValueFragments"],[290,33,298,33],[290,35,298,35],[290,74,298,44,"declaration"],[290,85,298,35],[290,87,298,57,"type"],[290,91,298,35],[290,93,298,63,"name"],[290,97,298,35],[290,99,298,69],[291,0,299,8],[291,13,299,15,"search"],[291,19,299,21],[291,20,299,22,"matchFragments"],[291,34,299,15],[291,35,299,37],[291,39,299,15],[291,41,299,43,"declaration"],[291,52,299,54],[291,53,299,55,"value"],[291,58,299,15],[291,60,299,62],[291,65,299,67,"matchDeclaration"],[291,81,299,62],[291,82,299,84,"declaration"],[291,93,299,62],[291,94,299,15],[291,96,299,98,"type"],[291,100,299,15],[291,102,299,104,"name"],[291,106,299,15],[291,107,299,8],[292,0,300,5],[292,5,116,18],[293,0,301,4,"findAllFragments"],[293,4,301,4,"findAllFragments"],[293,20,301,20],[293,22,301,22],[293,48,301,31,"ast"],[293,51,301,22],[293,53,301,36,"type"],[293,57,301,22],[293,59,301,42,"name"],[293,63,301,22],[293,65,301,48],[294,0,302,8],[294,10,302,12,"result"],[294,16,302,18],[294,19,302,21],[294,21,302,8],[295,0,304,8],[295,11,304,13,"syntax"],[295,17,304,8],[295,18,304,20,"walk"],[295,22,304,8],[295,23,304,25,"ast"],[295,26,304,8],[295,28,304,30],[296,0,305,12,"visit"],[296,8,305,12,"visit"],[296,13,305,17],[296,15,305,19],[296,28,304,30],[297,0,306,12,"enter"],[297,8,306,12,"enter"],[297,13,306,17],[297,15,306,19],[297,25,306,28,"declaration"],[297,36,306,19],[297,38,306,41],[298,0,307,16,"result"],[298,10,307,16,"result"],[298,16,307,22],[298,17,307,23,"push"],[298,21,307,16],[298,22,307,28,"apply"],[298,27,307,16],[298,28,307,34,"result"],[298,34,307,16],[298,36,307,42],[298,41,307,47,"findDeclarationValueFragments"],[298,70,307,42],[298,71,307,77,"declaration"],[298,82,307,42],[298,84,307,90,"type"],[298,88,307,42],[298,90,307,96,"name"],[298,94,307,42],[298,95,307,16],[299,0,308,13],[299,9,306,19],[299,10,308,14,"bind"],[299,14,306,19],[299,15,308,19],[299,19,306,19],[300,0,304,30],[300,7,304,8],[301,0,311,8],[301,13,311,15,"result"],[301,19,311,8],[302,0,312,5],[302,5,116,18],[303,0,314,4,"getAtrulePrelude"],[303,4,314,4,"getAtrulePrelude"],[303,20,314,20],[303,22,314,22],[303,48,314,31,"atruleName"],[303,58,314,22],[303,60,314,43],[304,0,315,8],[304,13,315,15],[304,18,315,20,"atrules"],[304,25,315,15],[304,26,315,28,"hasOwnProperty"],[304,40,315,15],[304,41,315,43,"atruleName"],[304,51,315,15],[304,55,315,57],[304,60,315,62,"atrules"],[304,67,315,57],[304,68,315,70,"atruleName"],[304,78,315,57],[304,80,315,82,"prelude"],[304,87,315,15],[304,90,315,92],[304,94,315,8],[305,0,316,5],[305,5,116,18],[306,0,317,4,"getAtruleDescriptor"],[306,4,317,4,"getAtruleDescriptor"],[306,23,317,23],[306,25,317,25],[306,54,317,34,"atruleName"],[306,64,317,25],[306,66,317,46,"name"],[306,70,317,25],[306,72,317,52],[307,0,318,8],[307,13,318,15],[307,18,318,20,"atrules"],[307,25,318,15],[307,26,318,28,"hasOwnProperty"],[307,40,318,15],[307,41,318,43,"atruleName"],[307,51,318,15],[307,56,318,58],[307,61,318,63,"atrules"],[307,68,318,58],[307,69,318,71,"declarators"],[307,80,318,15],[307,83,319,14],[307,88,319,19,"atrules"],[307,95,319,14],[307,96,319,27,"atruleName"],[307,106,319,14],[307,108,319,39,"declarators"],[307,119,319,14],[307,120,319,51,"name"],[307,124,319,14],[307,129,319,60],[307,133,318,15],[307,136,320,14],[307,140,318,8],[308,0,321,5],[308,5,116,18],[309,0,322,4,"getProperty"],[309,4,322,4,"getProperty"],[309,15,322,15],[309,17,322,17],[309,38,322,26,"name"],[309,42,322,17],[309,44,322,32],[310,0,323,8],[310,13,323,15],[310,18,323,20,"properties"],[310,28,323,15],[310,29,323,31,"hasOwnProperty"],[310,43,323,15],[310,44,323,46,"name"],[310,48,323,15],[310,52,323,54],[310,57,323,59,"properties"],[310,67,323,54],[310,68,323,70,"name"],[310,72,323,54],[310,73,323,15],[310,76,323,78],[310,80,323,8],[311,0,324,5],[311,5,116,18],[312,0,325,4,"getType"],[312,4,325,4,"getType"],[312,11,325,11],[312,13,325,13],[312,30,325,22,"name"],[312,34,325,13],[312,36,325,28],[313,0,326,8],[313,13,326,15],[313,18,326,20,"types"],[313,23,326,15],[313,24,326,26,"hasOwnProperty"],[313,38,326,15],[313,39,326,41,"name"],[313,43,326,15],[313,47,326,49],[313,52,326,54,"types"],[313,57,326,49],[313,58,326,60,"name"],[313,62,326,49],[313,63,326,15],[313,66,326,68],[313,70,326,8],[314,0,327,5],[314,5,116,18],[315,0,329,4,"validate"],[315,4,329,4,"validate"],[315,12,329,12],[315,14,329,14],[315,34,329,25],[316,0,330,8],[316,15,330,17,"validate"],[316,23,330,8],[316,24,330,26,"syntax"],[316,30,330,8],[316,32,330,34,"name"],[316,36,330,8],[316,38,330,40,"broken"],[316,44,330,8],[316,46,330,48,"descriptor"],[316,56,330,8],[316,58,330,60],[317,0,331,12],[317,12,331,16,"broken"],[317,18,331,22],[317,19,331,23,"hasOwnProperty"],[317,33,331,16],[317,34,331,38,"name"],[317,38,331,16],[317,39,331,12],[317,41,331,45],[318,0,332,16],[318,17,332,23,"broken"],[318,23,332,29],[318,24,332,30,"name"],[318,28,332,29],[318,29,332,16],[319,0,333,13],[321,0,335,12,"broken"],[321,8,335,12,"broken"],[321,14,335,18],[321,15,335,19,"name"],[321,19,335,18],[321,20,335,12],[321,23,335,27],[321,28,335,12],[323,0,336,12],[323,12,336,16,"descriptor"],[323,22,336,26],[323,23,336,27,"syntax"],[323,29,336,16],[323,34,336,38],[323,38,336,12],[323,40,336,44],[324,0,337,16,"walk"],[324,10,337,16,"walk"],[324,14,337,20],[324,15,337,21,"descriptor"],[324,25,337,31],[324,26,337,32,"syntax"],[324,32,337,20],[324,34,337,40],[324,44,337,49,"node"],[324,48,337,40],[324,50,337,55],[325,0,338,20],[325,16,338,24,"node"],[325,20,338,28],[325,21,338,29,"type"],[325,25,338,24],[325,30,338,38],[325,36,338,24],[325,40,338,48,"node"],[325,44,338,52],[325,45,338,53,"type"],[325,49,338,48],[325,54,338,62],[325,64,338,20],[325,66,338,74],[326,0,339,24],[327,0,340,21],[329,0,342,20],[329,16,342,24,"map"],[329,19,342,27],[329,22,342,30,"node"],[329,26,342,34],[329,27,342,35,"type"],[329,31,342,30],[329,36,342,44],[329,42,342,30],[329,45,342,53,"syntax"],[329,51,342,59],[329,52,342,60,"types"],[329,57,342,30],[329,60,342,68,"syntax"],[329,66,342,74],[329,67,342,75,"properties"],[329,77,342,20],[330,0,343,20],[330,16,343,24,"brokenMap"],[330,25,343,33],[330,28,343,36,"node"],[330,32,343,40],[330,33,343,41,"type"],[330,37,343,36],[330,42,343,50],[330,48,343,36],[330,51,343,59,"brokenTypes"],[330,62,343,36],[330,65,343,73,"brokenProperties"],[330,81,343,20],[332,0,345,20],[332,16,345,24],[332,17,345,25,"map"],[332,20,345,28],[332,21,345,29,"hasOwnProperty"],[332,35,345,25],[332,36,345,44,"node"],[332,40,345,48],[332,41,345,49,"name"],[332,45,345,25],[332,46,345,24],[332,50,345,58,"validate"],[332,58,345,66],[332,59,345,67,"syntax"],[332,65,345,66],[332,67,345,75,"node"],[332,71,345,79],[332,72,345,80,"name"],[332,76,345,66],[332,78,345,86,"brokenMap"],[332,87,345,66],[332,89,345,97,"map"],[332,92,345,100],[332,93,345,101,"node"],[332,97,345,105],[332,98,345,106,"name"],[332,102,345,100],[332,103,345,66],[332,104,345,20],[332,106,345,114],[333,0,346,24,"broken"],[333,14,346,24,"broken"],[333,20,346,30],[333,21,346,31,"name"],[333,25,346,30],[333,26,346,24],[333,29,346,39],[333,33,346,24],[334,0,347,21],[335,0,348,17],[335,11,337,20],[335,13,348,19],[335,17,337,20],[335,18,337,16],[336,0,349,13],[337,0,350,9],[339,0,352,8],[339,10,352,12,"brokenTypes"],[339,21,352,23],[339,24,352,26],[339,26,352,8],[340,0,353,8],[340,10,353,12,"brokenProperties"],[340,26,353,28],[340,29,353,31],[340,31,353,8],[342,0,355,8],[342,11,355,13],[342,15,355,17,"key"],[342,18,355,8],[342,22,355,24],[342,27,355,29,"types"],[342,32,355,8],[342,34,355,36],[343,0,356,12,"validate"],[343,8,356,12,"validate"],[343,16,356,20],[343,17,356,21],[343,21,356,20],[343,23,356,27,"key"],[343,26,356,20],[343,28,356,32,"brokenTypes"],[343,39,356,20],[343,41,356,45],[343,46,356,50,"types"],[343,51,356,45],[343,52,356,56,"key"],[343,55,356,45],[343,56,356,20],[343,57,356,12],[344,0,357,9],[346,0,359,8],[346,11,359,13],[346,15,359,17,"key"],[346,18,359,8],[346,22,359,24],[346,27,359,29,"properties"],[346,37,359,8],[346,39,359,41],[347,0,360,12,"validate"],[347,8,360,12,"validate"],[347,16,360,20],[347,17,360,21],[347,21,360,20],[347,23,360,27,"key"],[347,26,360,20],[347,28,360,32,"brokenProperties"],[347,44,360,20],[347,46,360,50],[347,51,360,55,"properties"],[347,61,360,50],[347,62,360,66,"key"],[347,65,360,50],[347,66,360,20],[347,67,360,12],[348,0,361,9],[350,0,363,8,"brokenTypes"],[350,6,363,8,"brokenTypes"],[350,17,363,19],[350,20,363,22,"Object"],[350,26,363,28],[350,27,363,29,"keys"],[350,31,363,22],[350,32,363,34,"brokenTypes"],[350,43,363,22],[350,45,363,47,"filter"],[350,51,363,22],[350,52,363,54],[350,62,363,63,"name"],[350,66,363,54],[350,68,363,69],[351,0,364,12],[351,15,364,19,"brokenTypes"],[351,26,364,30],[351,27,364,31,"name"],[351,31,364,30],[351,32,364,12],[352,0,365,9],[352,7,363,22],[352,8,363,8],[353,0,366,8,"brokenProperties"],[353,6,366,8,"brokenProperties"],[353,22,366,24],[353,25,366,27,"Object"],[353,31,366,33],[353,32,366,34,"keys"],[353,36,366,27],[353,37,366,39,"brokenProperties"],[353,53,366,27],[353,55,366,57,"filter"],[353,61,366,27],[353,62,366,64],[353,72,366,73,"name"],[353,76,366,64],[353,78,366,79],[354,0,367,12],[354,15,367,19,"brokenProperties"],[354,31,367,35],[354,32,367,36,"name"],[354,36,367,35],[354,37,367,12],[355,0,368,9],[355,7,366,27],[355,8,366,8],[357,0,370,8],[357,10,370,12,"brokenTypes"],[357,21,370,23],[357,22,370,24,"length"],[357,28,370,12],[357,32,370,34,"brokenProperties"],[357,48,370,50],[357,49,370,51,"length"],[357,55,370,8],[357,57,370,59],[358,0,371,12],[358,15,371,19],[359,0,372,16,"types"],[359,10,372,16,"types"],[359,15,372,21],[359,17,372,23,"brokenTypes"],[359,28,371,19],[360,0,373,16,"properties"],[360,10,373,16,"properties"],[360,20,373,26],[360,22,373,28,"brokenProperties"],[361,0,371,19],[361,9,371,12],[362,0,375,9],[364,0,377,8],[364,13,377,15],[364,17,377,8],[365,0,378,5],[365,5,116,18],[366,0,379,4,"dump"],[366,4,379,4,"dump"],[366,8,379,8],[366,10,379,10],[366,24,379,19,"syntaxAsAst"],[366,35,379,10],[366,37,379,32,"pretty"],[366,43,379,10],[366,45,379,40],[367,0,380,8],[367,13,380,15],[368,0,381,12,"generic"],[368,8,381,12,"generic"],[368,15,381,19],[368,17,381,21],[368,22,381,26,"generic"],[368,29,380,15],[369,0,382,12,"types"],[369,8,382,12,"types"],[369,13,382,17],[369,15,382,19,"dumpMapSyntax"],[369,28,382,32],[369,29,382,33],[369,34,382,38,"types"],[369,39,382,32],[369,41,382,45],[369,42,382,46,"pretty"],[369,48,382,32],[369,50,382,54,"syntaxAsAst"],[369,61,382,32],[369,62,380,15],[370,0,383,12,"properties"],[370,8,383,12,"properties"],[370,18,383,22],[370,20,383,24,"dumpMapSyntax"],[370,33,383,37],[370,34,383,38],[370,39,383,43,"properties"],[370,49,383,37],[370,51,383,55],[370,52,383,56,"pretty"],[370,58,383,37],[370,60,383,64,"syntaxAsAst"],[370,71,383,37],[371,0,380,15],[371,7,380,8],[372,0,385,5],[372,5,116,18],[373,0,386,4,"toString"],[373,4,386,4,"toString"],[373,12,386,12],[373,14,386,14],[373,34,386,25],[374,0,387,8],[374,13,387,15,"JSON"],[374,17,387,19],[374,18,387,20,"stringify"],[374,27,387,15],[374,28,387,30],[374,33,387,35,"dump"],[374,37,387,30],[374,39,387,15],[374,40,387,8],[375,0,388,5],[376,0,116,18],[376,3,116,0],[377,0,391,0,"module"],[377,2,391,0,"module"],[377,8,391,6],[377,9,391,7,"exports"],[377,16,391,0],[377,19,391,17,"Lexer"],[377,24,391,0]],"functionMap":{"names":["<global>","dumpMapSyntax","valueHasVar","buildMatchResult","matchSyntax","Lexer","prototype.checkStructure","collectWarning","syntax.walk$argument_1","prototype.createDescriptor","Object.defineProperty$argument_2.get","prototype.addAtrule_","Object.keys.reduce$argument_0","prototype.addProperty_","prototype.addType_","prototype.matchAtrulePrelude","prototype.matchAtruleDescriptor","prototype.matchDeclaration","prototype.matchProperty","prototype.matchType","prototype.match","prototype.findValueFragments","prototype.findDeclarationValueFragments","prototype.findAllFragments","<anonymous>","prototype.getAtrulePrelude","prototype.getAtruleDescriptor","prototype.getProperty","prototype.getType","prototype.validate","validate","walk$argument_1","Object.keys.filter$argument_0","prototype.dump","prototype.toString"],"mappings":"AAA;ACgB;CDY;AEE;CFQ;AGE;CHU;AIE;CJwB;YKE;CLmC;oBMI;QCC;SDK;8BEK;SFM;KNG;sBSE;yBCkB;qBDM;qBCQ;iBDM;KTK;gBWC;yDCI;iBDG;KXG;kBaC;KbE;ccC;KdM;wBeE;KfgB;2BgBC;KhByB;sBiBC;KjBM;mBkBC;KlBiB;emBC;KnBQ;WoBC;KpBU;wBqBE;KrBE;mCsBC;KtBE;sBuBC;mBCK;aDE;KvBI;sByBE;KzBE;yB0BC;K1BI;iB2BC;K3BE;a4BC;K5BE;c6BE;QCC;wCCO;iBDW;SDE;sDGa;SHE;gEGC;SHE;K7BU;UiCC;KjCM;ckCC;KlCE"}},"type":"js/module"}]}